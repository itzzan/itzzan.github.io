<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java概述</title>
      <link href="/post/1113d944.html"/>
      <url>/post/1113d944.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java重要特点"><a href="#Java重要特点" class="headerlink" title="Java重要特点"></a>Java重要特点</h2><ol><li>Java语言是<strong>面向对象</strong>的（oop）</li><li>Java语言是<strong>健壮</strong>的，Java的<strong>强类型机制</strong>、<strong>异常处理</strong>、<strong>垃圾的自动收集</strong>等是Java程序<strong>健壮性</strong>的重要保证</li><li>Java语言是<strong>跨平台性</strong>的</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/25080baebb65c9de8ed4507fc35c6561.png" alt="img"></p><p>将 <strong>.java</strong> 编译成 <strong>,class</strong>，这个 <strong>.class</strong> 既可以在<strong>Linux</strong>，又可以在<strong>windows</strong>运行</p><p>即编译好的 <strong>.class</strong> 文件可以在<strong>多个系统</strong>下运行，这种特性就是<strong>跨平台性</strong></p><ul><li><strong>补充：为什么可以运行</strong></li><li><strong>因为每一个操作系统上都有一个JVM，不同的操作系统里，JVM都不一样，根本原因就是靠JVM来支撑，另外JVM包含在JDK里面</strong></li></ul><ol start="4"><li>Java语言是<strong>解释性</strong>的（了解）</li></ol><p><strong>解释性</strong>语言：javascript、php、Java、</p><p><strong>编译性</strong>语言：C、C++</p><p>解释性语言和编译性语言的<strong>区别</strong>：解释性语言的编译后的代码，<strong>不能直接被机器执行</strong>，还需要<strong>解释器</strong>来执行，而编译性语言的编译后的代码，可以<strong>直接被机器执行</strong></p><h2 id="Java虚拟机（JVM）"><a href="#Java虚拟机（JVM）" class="headerlink" title="Java虚拟机（JVM）"></a>Java虚拟机（JVM）</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域，负责执行指令、管理数据、内存、寄存器，包含在 <strong>JDK</strong> 中</li><li>对于<strong>不同的平台</strong>，有<strong>不同的虚拟机</strong></li><li>Java虚拟机机构屏蔽了底层运行平台的差别，实现了“<strong>一次编译、到处运行</strong>”</li></ol><h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/087817eba49daee491006e3ae43db577.png" alt="img"></p><h2 id="JDK和JRE"><a href="#JDK和JRE" class="headerlink" title="JDK和JRE"></a>JDK和JRE</h2><h3 id="JDK基本介绍"><a href="#JDK基本介绍" class="headerlink" title="JDK基本介绍"></a>JDK基本介绍</h3><p><strong>JDK（Java Development Kit      Java开发工具包）</strong></p><ul><li><strong>JDK &#x3D; JRE + Java的开发工具（java、javac、javadoc、javap）</strong></li><li>JDK是提供给Java开发人员使用的，其中包含了Java的开发工具，也<strong>包含了 JRE</strong> ，因此安装了 JDK ，就可以不用在单独安装 JRE 了</li></ul><h3 id="JRE基本介绍"><a href="#JRE基本介绍" class="headerlink" title="JRE基本介绍"></a>JRE基本介绍</h3><p><strong>JRE（Java Runtime Environment       Java的运行环境）</strong></p><ul><li><strong>JRE &#x3D; JVM + Java的核心类库【类】</strong></li><li>包括Java虚拟机（JVM - Java Virtual Machine）和Java程序所需的核心类库等</li><li>因此如果想要运行一个<strong>已经开发好</strong>的 Java 程序，计算机中<strong>只需要安装 JRE</strong> 即可，好比程序员已经写好了 <strong>test.java</strong> 的文件，并且<strong>编译</strong>成了 <strong>test.class</strong> 文件，而另一个人想要运行的话只需要<strong>JRE这个运行环境</strong>，就不需要 <strong>javac 这些开发工具</strong>了</li></ul><h3 id="JDK、JRE、JVM的包含关系"><a href="#JDK、JRE、JVM的包含关系" class="headerlink" title="JDK、JRE、JVM的包含关系"></a>JDK、JRE、JVM的包含关系</h3><ul><li><strong>JDK &#x3D; JRE + 开发工具集（例如javac、java编译工具等）</strong></li><li><strong>JRE &#x3D; JVM + Java SE标准类库（Java核心类库）</strong></li><li>如果只想运行开发好的 .class 文件，只需要JRE</li></ul><h3 id="安装JDK和JRE"><a href="#安装JDK和JRE" class="headerlink" title="安装JDK和JRE"></a>安装JDK和JRE</h3><ul><li>安装JDK的细节：一般<strong>安装长期支持版</strong>如：<strong>Java 8</strong>，<strong>Java 11</strong>， 或者现在的<strong>Java 17</strong></li><li>注意：JDK安装过程中的<strong>安装路径不能</strong>有<strong>中文</strong>或者<strong>特殊符号如空格</strong>等，而安装JRE，看你自己，可以不安装，因为JDK中含有JRE</li></ul><h2 id="配置环境变量path"><a href="#配置环境变量path" class="headerlink" title="配置环境变量path"></a>配置环境变量path</h2><h3 id="为什么要配置环境变量path"><a href="#为什么要配置环境变量path" class="headerlink" title="为什么要配置环境变量path"></a>为什么要配置环境变量path</h3><p>在<strong>命令行窗口（dos命令行）</strong>下运行 <strong>java</strong> 和 <strong>javac</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e4f0849d775520a1abdbe1f7baa6456f.png" alt="img"></p><p><strong>为什么报错</strong>：</p><p>由于当前执行的程序在<strong>当前目录下不存在</strong>（<strong>因为我们将JDK安装在了别的路径下</strong>），因此win10系统会在<strong>系统中已有的path路径下查找</strong>，若查找不到就会报错</p><p>而我们为了能够在任何一个目录下执行 java 和 javac，因此我们就需要去配置环境变量</p><h3 id="配置环境变量path的步骤"><a href="#配置环境变量path的步骤" class="headerlink" title="配置环境变量path的步骤"></a>配置环境变量path的步骤</h3><ol><li><strong>我的电脑 – 右键属性 – 高级系统设置 – 环境变量</strong></li><li><strong>增加 JAVA_HOME 环境变量，执行JDK的安装目录，如我的：F:\soft\Java</strong></li><li><strong>编译 path 环境变量，增加 %JAVA_HOME%\bin</strong></li><li><strong>打开命令行窗口（DOS命令行），任意目录下敲入 java 和 javac，如果出现 java 或者 javac的参数信息，则表示配置成功</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/93d0d584857d6dfc22cbd77830d650ad.png" alt="img"></p><ul><li>既可以在<strong>用户变量</strong>里配置，也可以在<strong>系统变量</strong>里配置，不同的点就是在用户变量里配置，只能供lenovo这个用户使用，换个用户就需要重新配置，不然使用不了，而系统变量表示所有用户都可以使用</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/cbf8ad33b283dc49be17baac6a1ac0af.png" alt="img"></p><p>配置完成后，就能在任意目录下的命令行窗口下运行java，可以查看其版本</p><p><img src="https://img-blog.csdnimg.cn/img_convert/da438df67bf07a3d037e8dab5b811134.png" alt="img"></p><h2 id="Java快速入门（使用Sublime-Text）"><a href="#Java快速入门（使用Sublime-Text）" class="headerlink" title="Java快速入门（使用Sublime Text）"></a>Java快速入门（使用Sublime Text）</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>要求开发一个 Hello.java 程序们，可以输出 “hello，world！”</p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol><li>将 Java 代码编写到扩展名为 <strong>Hello.java</strong> 的文件中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是java的快速入门，演示java的开发步骤</span></span><br><span class="line"><span class="comment">//对代码的相关说明</span></span><br><span class="line"><span class="comment">//1. public class Hello 表示Hello是一个类，是一个public公有的类</span></span><br><span class="line"><span class="comment">//2. Hello&#123; &#125; 表示一个类的开始和结束</span></span><br><span class="line"><span class="comment">//3. public static void main(String[] args) 表示一个主方法，即我们程序的入口</span></span><br><span class="line"><span class="comment">//4. main() &#123; &#125; 表示方法的开始和结束</span></span><br><span class="line"><span class="comment">//5. System.out.println(&quot;hello,world~&quot;); 表示输出&quot;hello,world~&quot;到屏幕</span></span><br><span class="line"><span class="comment">//6. ; 表示语句结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过 <strong>javac</strong> 命令对该 <strong>java</strong> 文件进行<strong>编译</strong>，生成 <strong>.class</strong> 文件</li></ol><p><strong>使用Sublime Text这个软件进行编译的，默认使用UTF-8，<strong><strong>并且在文件中含有文字（即注释）</strong></strong>，由于DOS命令行（命令行窗口）是GBK格式，因此在命令行窗口下（DOS命令行）使用 javac 进行编译的时候会报错，****这里如果没有文字，虽然编译的类型不同，但还是能够编译</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2a78cf539af5fb560aea61b221271cbd.png" alt="img"></p><ul><li><strong>它提醒你是编码 GBK 的不可映射字符，这是由于命令行窗口是默认使用 GBK 的编码，而Sublime Text是  UTF-8 的编码，<strong><strong>主要原因是文件中还含有中文（即注释）</strong></strong>，两者类型不同，</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7baa484ec7ba569eaec101427ce03d8d.png" alt="img"></p><ul><li><strong>因此为了解决这个问题，就需要将Sublime Text默认的文件编码转变成 GBK</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/e73c8898b1355a999fbae26b7656a1b2.png" alt="img"></p><ul><li><strong>这样子就能正常编译，正常运行</strong></li></ul><ol start="3"><li>通过 <strong>java</strong> 命令对生成的 <strong>.class</strong> 文件进行<strong>运行</strong></li></ol><ul><li>运行直接 <strong>java 文件名</strong></li><li>运行不用 <strong>.class</strong> ，因为Java的<strong>规则</strong>，java Hello <strong>只运行我们编写的类</strong>（即public class Hello），如果加上，会认为我们运行的是 Hello.class 的类，因此运行的时候<strong>不用加 .class</strong></li></ul><h3 id="运行原理示意图"><a href="#运行原理示意图" class="headerlink" title="运行原理示意图"></a>运行原理示意图</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/83b7bb906d56eef7eeacd0dc06fe72a1.png" alt="img"></p><h3 id="Java执行流程分析"><a href="#Java执行流程分析" class="headerlink" title="Java执行流程分析"></a>Java执行流程分析</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/60cd1016dedd58e94406bae87e0f64f5.png" alt="img"></p><ul><li>运行就是通过<strong>运行工具</strong> <strong>java.exe</strong> 对<strong>字节码文件（.class）</strong>进行执行，本质上就是将 <strong>.class</strong> 文件<strong>装载</strong>到 <strong>JVM</strong> 机上执行</li><li>注意事项：当修改过文件后，需要重新编译，生成新的 .class 文件，再次执行，才会改变</li></ul><h2 id="Java开发注意事项和细节说明"><a href="#Java开发注意事项和细节说明" class="headerlink" title="Java开发注意事项和细节说明"></a>Java开发注意事项和细节说明</h2><ol><li><strong>Java源文件以 .java 为扩展名，源文件的基本组成部分是类（class），如本类中的Hello类</strong></li><li><strong>Java应用程序的执行入口是 main() 方法，它有固定的书写格式：</strong></li></ol><p><strong>public static void main(String[] args) {…}</strong></p><ol start="3"><li><p><strong>Java语法严格区分大小写</strong></p></li><li><p><strong>Java方法由一条条语句构成，每个语句以 “ ; “ 结束</strong></p></li><li><p><strong>大括号都是成对出现的，缺一不可。[习惯：先写 {} 再写代码]</strong></p></li><li><p><strong>一个源文件中最多只能有一个public类，其他类的个数不限</strong></p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/2999f9504dc0a434a671412a8932a19f.png" alt="img"></p><ul><li>这样子编译后，<strong>每一个类都有</strong>一个 .class 文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/acb0c7098cee8c90efbc6f96ee002152.png" alt="img"></p><ol start="7"><li><strong>如果源文件包含一个public类，则文件名必须按该类名命名！</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/2fdc851f28ff40a6f01efba6b34d2da2.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里<strong>类名和文件不同</strong>，编译的时候会发生<strong>报错</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/81f965de9e09eb785c68b570e7f41b29.png" alt="img"></p><ol start="8"><li><strong>一个源文件中最多只能有一个public类，其他类的个数不限，也可以将main方法写在 非public类 中，然后指定运行 非public类，这样入口方法就是 非public 的main方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zan教育&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个源文件中最多只能有一个public类，其他类的个数不限</span></span><br><span class="line"><span class="comment">//Dog是一个类</span></span><br><span class="line"><span class="comment">//编译后，每一个类都对应一个.class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个源文件中最多只能由一个public类，其他类的个数不限，也可以将main方法写在非public类中</span></span><br><span class="line"><span class="comment">//然后指定运行非public，这样入口方法就是在非public的main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello, 小狗狗~&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello, 小老虎~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里 <strong>非class类</strong> 运行后，会只进入 <strong>非class类</strong> 的<strong>main入口处</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c8309d0a660e2566984d9e9b58f940ca.png" alt="img"></p><h2 id="Java转义字符"><a href="#Java转义字符" class="headerlink" title="Java转义字符"></a>Java转义字符</h2><ol><li><strong>\t：一个制表位，实现代码对齐的功能</strong></li><li><strong>\n：换行符</strong></li><li>*<em>\：一个*</em></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeChar</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//      \\：一个\</span></span><br><span class="line"><span class="number">1.</span> System.out.println(<span class="string">&quot;F:\Java\code&quot;</span>);<span class="comment">//error</span></span><br><span class="line"><span class="number">2.</span> System.out.println(<span class="string">&quot;F:\\Java\\code&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f833ac7a11295e5b015a78b319dea987.png" alt="img"></p><ul><li>第一种情况就会<strong>报错</strong>，因为 \ 被<strong>默认当作转义字符的标志</strong>，因此想要打印出 \ ，就需要两个\</li></ul><ol start="4"><li><strong>&quot;：一个”</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeChar</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//\&quot;：一个“</span></span><br><span class="line"><span class="number">1.</span> System.out.println(<span class="string">&quot;老张说:&quot;</span>要好好学习java，有前途<span class="string">&quot;&quot;</span>);<span class="comment">//error</span></span><br><span class="line"><span class="number">2.</span> System.out.println(<span class="string">&quot;老张说:\&quot;要好好学习java，有前途\&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b3b74e21899077f3c07b703276d54999.png" alt="img"></p><ul><li>第一种情况也会报错，因为有两个双引号，解析不出来了</li></ul><ol start="5"><li><strong>&#39;：一个’</strong></li></ol><ul><li>原理同\</li></ul><ol start="6"><li><strong>\r：一个回车</strong></li></ol><ul><li>\r 表示回车 - 而<strong>回车过后</strong>会将<strong>光标</strong>放到<strong>输出的当前行</strong>的<strong>第一个字符前</strong>，用 <strong>\r 后面的字符替换当前的字符</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeChar</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//\r：一个回车</span></span><br><span class="line"><span class="comment">//1. 输出 老张的</span></span><br><span class="line"><span class="comment">//2. \r 表示回车 - 回车过后将光标放到输出的当前行的第一个字符，</span></span><br><span class="line"><span class="comment">//        用后面的字符替换当前的字符</span></span><br><span class="line">System.out.println(<span class="string">&quot;老张的\r教育&quot;</span>); <span class="comment">// 教育的</span></span><br><span class="line">System.out.println(<span class="string">&quot;老张的\r\n教育&quot;</span>); <span class="comment">// 老张的</span></span><br><span class="line"> <span class="comment">// 教育</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3882ac06a54b22ecf5f00eddfb552120.png" alt="img"></p><ul><li><strong>\n会将光标定位到下一行的位置</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示转义字符的使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeChar</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//\t：一个制表位，实现对齐的功能</span></span><br><span class="line">System.out.println(<span class="string">&quot;1. 北京\t天津\t上海&quot;</span>);</span><br><span class="line"><span class="comment">//\n：换行符</span></span><br><span class="line">System.out.println(<span class="string">&quot;2. jack\nsmith\nary&quot;</span>);</span><br><span class="line"><span class="comment">//\\：一个\</span></span><br><span class="line">System.out.println(<span class="string">&quot;3. F:\\Java\\code&quot;</span>);</span><br><span class="line"><span class="comment">//\&quot;：一个“</span></span><br><span class="line">System.out.println(<span class="string">&quot;4. 老张说:\&quot;要好好学习java，有前途\&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//\&#x27;：一个‘</span></span><br><span class="line">System.out.println(<span class="string">&quot;5/ 老张说:\&#x27;要好好学习java，有前途\&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//\r：一个回车</span></span><br><span class="line"><span class="comment">//1. 输出 老张的</span></span><br><span class="line"><span class="comment">//2. \r 表示回车 - 回车过后将光标放到输出的当前行的第一个字符，用后面的字符替换当前的字符</span></span><br><span class="line">System.out.println(<span class="string">&quot;6. &quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;老张的\r教育&quot;</span>); <span class="comment">// 教育的</span></span><br><span class="line">System.out.println(<span class="string">&quot;老张的\r\n教育&quot;</span>); <span class="comment">// 老张的</span></span><br><span class="line"> <span class="comment">// 教育</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3fad086dfc8e2cfe780538e087ed821e.png" alt="img"></p><h2 id="初学Java易犯错误"><a href="#初学Java易犯错误" class="headerlink" title="初学Java易犯错误"></a>初学Java易犯错误</h2><ol><li><strong>找不到文件</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/8240cce6defe04f8fb71da5d55a90251.png" alt="img"></p><ul><li>解决方法：源文件名不存在或者写错，或者当前路径错误</li></ul><ol start="2"><li><strong>主类名和文件名不一致</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/5a315e7ab7d5995cf893f8dac9edfd65.png" alt="img"></p><ul><li>解决方法：声明为public的主类应与文件名一致，否则编译失败</li></ul><ol start="3"><li><strong>缺少分号</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/bb336594f32a532cefaabaad920566a5.png" alt="img"></p><ul><li>解决方法：编译失败，注意错误出现的行数，再到源代码中指定位置改错</li></ul><ol start="4"><li><strong>常见错误总结</strong></li></ol><p>学习编程最容易犯的错是<strong>语法错误</strong>(初学者)。Java要求你必须按照语法规则去编写代码。如果你的程序违反了语法规则，例如：忘记加分号、大括号、引号、或者拼错了单词，java编译器都会报语法错误。尝试着去看懂编译器会报错的错误信息</p><ol><li>数字 1 写成字母 l</li><li>数字 0 写成字母 o</li><li>英文符号写成中文字符：; ；” ”</li><li>拼写错误：void -&gt; viod</li><li>业务错误、环境错误（不好修改）</li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li><strong>单行注释 &#x2F;&#x2F;</strong></li></ol><p>基本格式：&#x2F;&#x2F;注释文字</p><ol start="2"><li><strong>多行注释 &#x2F;* *&#x2F;</strong></li></ol><p>基本格式“&#x2F;*  注释文字  *&#x2F;</p><ul><li><strong>单行注释和文档注释的使用细节</strong></li><li>\1. 被注释的文字，不会被JVM（java虚拟机）解释执行（即注释里的东西不会被执行）</li><li>\2. 多行注释里面不允许有多行注释嵌套</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示注释使用</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comment01</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//嵌套注释</span></span><br><span class="line"><span class="comment">/*示意</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">下面代码完成 两个数相加</span><br><span class="line">定义变量</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3d57e03acb2d1ed6c127f56acba52a49.png" alt="img"></p><ul><li><strong>嵌套注释的错误</strong></li></ul><ol start="3"><li><em><em>文档注释 &#x2F;*</em>  *&#x2F;</em>*</li></ol><p><strong>注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档，一般写在类前</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文档注释</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 张zan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comment02</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本格式就是**&#x2F;**  *&#x2F;<strong>包含，然后中间以</strong>*@*<em>格式来写，</em>@后面的内容具体可以参考《javadoc 标签.docx》</p><ul><li>另外应用的格式就是</li></ul><p>javadoc -d 文件夹名 -xx -yy 程序名</p><p>如：javadoc -d F:\java\code\temp -author -version Comment02.java</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9a967f3e09ec606771f060c5429b65dc.png" alt="img"></p><ul><li>这样就会在temp文件夹里面生成一大推网页文件</li></ul><h2 id="Java代码规范"><a href="#Java代码规范" class="headerlink" title="Java代码规范"></a>Java代码规范</h2><ol><li><strong>类、方法的注释，要以javadoc的方式来写</strong></li><li><strong>非JavaDoc的注释，往往都是给代码的维护者看的，着重告诉为什么这样写，如何修改，注意什么问题等</strong></li><li><strong>使用tab操作，实现缩进，默认整体向右边移动，也可以用shift+tab整体向左移</strong></li><li><strong>运算符和 &#x3D; 两边习惯性的各加一个空格，比如：2 + 4 * 5 + 345 - 89</strong></li><li><strong>源文件一般都使用utf-8编码（上面是由于在DOS上运行，DOS是GBK格式）</strong></li><li><strong>行宽度不要超过80个字符（即能一行看完，不需要拉动）</strong></li><li><strong>代码编写次行风格和行尾风格（推荐）</strong></li></ol><h2 id="DOS命令（了解）"><a href="#DOS命令（了解）" class="headerlink" title="DOS命令（了解）"></a>DOS命令（了解）</h2><h3 id="DOS介绍"><a href="#DOS介绍" class="headerlink" title="DOS介绍"></a>DOS介绍</h3><p>Dos： Disk Operating System 磁盘操作系统</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d8b66a2ff4d6b510de5a41aa97fc28b1.png" alt="img"></p><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c5c82263aa00a22d2959c59db7c54e2e.png" alt="img"></p><p><strong>相对路径：从当前目录开始定位，形成的一个路径</strong></p><p><strong>绝对路径：从顶级目录（根目录）D盘，开始定位，形成的路径</strong></p><p>需求：想在当前目录下（D:\abc\test100）访问hello.txt</p><ul><li>相对路径：....\abc2\test200\hello.txt</li><li>绝对路径：D:\abc2\test200\hello.txt</li></ul><h3 id="常用的DOS命令"><a href="#常用的DOS命令" class="headerlink" title="常用的DOS命令"></a>常用的DOS命令</h3><ol><li>dir：查看当前目录是有什么内容，例：dir d:\abc2\test200</li><li>cd：切换到其他盘下，盘符号，例：cd &#x2F;d C:（&#x2F;d是必须要的）</li></ol><p>还可以切换到当前盘的其他目录下（相对路径和绝对路径）..\表示上一级目录，例：cd d:\abc2\test200 或 cd ....\abc2\test200（当前目录在d:\abc\test100）</p><ol><li>切换到上一级：cd ..</li><li>切换到根目录：cd \</li><li>tree：查看指定的目录下所有的子级目录</li><li>cls：清屏</li><li>exit：退出DOS</li><li>md：创建目录，例：md d:\temp - 即在d盘创建temp文件夹</li><li>rd：删除目录，例：rd d:\temp - 即删除在d盘的temp文件夹</li><li>copy：拷贝文件</li><li>del：删除文件</li><li>echo：输入内容要文件，例：echo hello &gt; hello.txt   即将hello放在hello.txt里面，空文件就是echo nul &gt; pic.txt</li><li>type：显示文件里的内容，例：type hello.txt  即显示hello.txt里面的内容</li><li>move：移动，例：move ok.txt F:\ok.txt，将ok.txt移到F盘下</li></ol><p><strong>本文是作者直接从CSDN拿过来的</strong><br>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://blog.csdn.net/weixin_65508929/article/details/126563148">https://blog.csdn.net/weixin_65508929/article/details/126563148</a><br>————————————————</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础入门</title>
      <link href="/post/d239e374.html"/>
      <url>/post/d239e374.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h1><ul><li><strong>本文是作者初学C语言的笔记整理哦，已进行6次更新（还会不断更新，结束会说明哦），小伙伴们注意接收哦，另外有什么问题可以留下你的邮箱，我会及时查看哦，另外制作不易，一键三连哦~</strong></li><li><strong>本文现已结束初阶C语言，接下来将进入进阶C语言</strong></li></ul><h1 id="二-第一个C语言程序"><a href="#二-第一个C语言程序" class="headerlink" title="二. 第一个C语言程序"></a>二. 第一个C语言程序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;初学C语言&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>这里说明下：</em></p><ul><li><p>由于<strong>printf的使用</strong>，需要引入头文件#include &lt;stdio.h&gt;。头文件就是为了这个printf函数的实现</p></li><li><p>在运行程序的时候，如果使用的是<strong>VS2013版本</strong>的，会发现反应很快，输出一闪而过，这时候就需要设置一下为了看到代码运行的结果。如果用的是VS2013以上的版本，则不需要设置，都已经配置好了。将其子系统那块改成控制台即可。<br>  <img src="https://img-blog.csdnimg.cn/bf002d17ee514efeaef44ef996f9a1af.png" alt="在这里插入图片描述"></p></li><li><p><strong>一个工程中有且仅有一个main函数</strong></p><ol><li>一个工程中可以有多个.c文件</li><li>多个.c文件只能有一个main函数</li></ol></li></ul><h1 id="三-数据类型"><a href="#三-数据类型" class="headerlink" title="三. 数据类型"></a>三. 数据类型</h1><table><thead><tr><th>代码</th><th>数据类型</th></tr></thead><tbody><tr><td>char</td><td>字符数据类型</td></tr><tr><td>short</td><td>短整型</td></tr><tr><td>int</td><td>整型</td></tr><tr><td>long</td><td>长整型</td></tr><tr><td>long long</td><td>更长的整型</td></tr><tr><td>float</td><td>单精度浮点数</td></tr><tr><td>double</td><td>双精度浮点数</td></tr></tbody></table><ul><li><p>每种类型的大小（用sizeof来计算，单位byte）<br> <img src="https://img-blog.csdnimg.cn/0d8487b8436649cbbcf011e63454afe0.png" alt="在这里插入图片描述"></p></li><li><p><strong>注：C语言标准：sizeof(long) &gt;&#x3D; sizeof(int)</strong></p></li><li><p><strong>注：sizeof 是关键字，操作符，不是函数</strong></p></li><li><p><em>计算机中的单位</em></p></li></ul><table><thead><tr><th>English</th><th>名称</th><th>换算</th></tr></thead><tbody><tr><td>bit</td><td>比特</td><td></td></tr><tr><td>byte</td><td>字节</td><td>1 byte &#x3D; 8 bit</td></tr><tr><td>KB</td><td>千字节</td><td>1 KB &#x3D; 1024 byte</td></tr><tr><td>MB</td><td>兆字节</td><td>1 MB &#x3D; 1024 KB</td></tr><tr><td>GB</td><td>吉字节</td><td>1 GB &#x3D; 1024 MB</td></tr><tr><td>TB</td><td>太字节</td><td>1 TB &#x3D; 1024 GB</td></tr><tr><td>PB</td><td>Petabyte</td><td>1 PB &#x3D; 1024 TB</td></tr></tbody></table><ul><li>计算机中识别二进制 - 0和1</li><li>识别八进制 - 0-7</li><li>识别十进制 - 0-9</li></ul><h1 id="四-变量和常量"><a href="#四-变量和常量" class="headerlink" title="四. 变量和常量"></a>四. 变量和常量</h1><h2 id="a）变量"><a href="#a）变量" class="headerlink" title="a）变量"></a>a）变量</h2><ul><li>定义：有些数据一定可变：工资、年龄、体重</li><li><strong>变量的生命周期指的是变量的创建到变量的销毁之间的一个时间段</strong></li></ul><h3 id="1）局部变量"><a href="#1）局部变量" class="headerlink" title="1）局部变量"></a>1）局部变量</h3><ul><li><strong>局部变量的作用域是变量所在的局部范围</strong></li><li><strong>局部变量的生命周期是：进入作用域生命周期开始，出作用域生命周期结束</strong></li></ul><h3 id="2）全局变量"><a href="#2）全局变量" class="headerlink" title="2）全局变量"></a>2）全局变量</h3><ul><li><strong>全局变量的作用域是整个工程</strong></li><li><strong>全局变量的生命周期是：整个程序的生命周期</strong></li></ul><p> <strong>注意：</strong><br> <img src="https://img-blog.csdnimg.cn/5ffd835e609146f79fa40dce8e413601.png" alt="在这里插入图片描述"></p><ul><li><strong>局部变量global变量的定义没有什么问题</strong></li><li><strong>当局部变量和全局变量同名的时候，局部变量优先使用</strong></li></ul><h2 id="b）常量"><a href="#b）常量" class="headerlink" title="b）常量"></a>b）常量</h2><ul><li>定义：有些数据一定不变：血型、性别、圆周率</li></ul><h3 id="1）字面常量（相当于直接写）"><a href="#1）字面常量（相当于直接写）" class="headerlink" title="1）字面常量（相当于直接写）"></a>1）字面常量（相当于直接写）</h3><p>  <img src="https://img-blog.csdnimg.cn/2e63b9b0cb6a4929adcc9d6d3c54b791.png" alt="List item"></p><h3 id="2）const修饰的常量"><a href="#2）const修饰的常量" class="headerlink" title="2）const修饰的常量"></a>2）const修饰的常量</h3><p> <img src="https://img-blog.csdnimg.cn/b88ecaa21a704dec9f3bf2dd4e8d37d1.png" alt="List item"></p><ul><li><strong>const修饰的常变量不能被修改</strong>，因为const定义的基本类型的变量保存的是实际的内存地址, 内存地址不能动</li><li>pai 被称为 const 修饰的常变量， const 修饰的常变量 在C语言中只是在语法层面限制了变量 pai 不能直接被 改变，但是 pai 本质上还是一个变量的，所以叫常变量</li></ul><h3 id="3）-define定义的标识符常量"><a href="#3）-define定义的标识符常量" class="headerlink" title="3）#define定义的标识符常量"></a>3）#define定义的标识符常量</h3><p><img src="https://img-blog.csdnimg.cn/2527fd5026bf46e0be75e3ff3f152edd.png" alt="在这里插入图片描述"></p><ul><li>#define定义的标识符不占内存，只是一个临时 的符号，预编译后这个符号就不存在了</li></ul><h3 id="4）枚举常量"><a href="#4）枚举常量" class="headerlink" title="4）枚举常量"></a>4）枚举常量</h3><p><img src="https://img-blog.csdnimg.cn/34fc1b5631e14f338c35aa152a092202.png" alt="在这里插入图片描述"></p><ul><li>枚举常量的默认是从0开始，依次向下递增1的</li></ul><h1 id="五-字符串-转义字符-注释"><a href="#五-字符串-转义字符-注释" class="headerlink" title="五. 字符串+转义字符+注释"></a>五. 字符串+转义字符+注释</h1><h2 id="a）字符串"><a href="#a）字符串" class="headerlink" title="a）字符串"></a>a）字符串</h2><ul><li>定义：一串字符，用双引号括起来的一串字符</li><li><strong>字符串的结束标志是\0的转义字符</strong></li><li><strong>计算字符串长度的时候，\0是结束标志，不算作字符串的内容</strong></li></ul><h3 id="1）字符数组"><a href="#1）字符数组" class="headerlink" title="1）字符数组"></a>1）字符数组</h3><ul><li>定义： 字符数组是一组相同类型的元素<br><img src="https://img-blog.csdnimg.cn/8cebf49879d04c31aae6213a118b845d.png" alt="在这里插入图片描述"></li><li><strong>当方括号里面不写这个数组有几个元素的时候， 会根据后面数据的大小自动分配</strong></li><li><strong>\0是隐藏的</strong><br><img src="https://img-blog.csdnimg.cn/e2830c425c734988baac11f2160b41a3.png" alt="在这里插入图片描述"></li><li><strong>arr2的后面的内存是未知的，而arr1后面有着字 符串结束标志\0</strong></li><li><strong>注：对于字符串来说，\0是至关重要的，后面一定要 有\0，不然后面的空间识别不出，当运行后就会 显示乱码</strong></li></ul><p><em><strong>计算字符串的长度</strong></em><br><img src="https://img-blog.csdnimg.cn/662e90e438a04ce6810162447930ac37.png" alt="在这里插入图片描述"></p><ul><li><strong>注：由于arr2后面没有\0字符串结束标志，则arr2是不会结束的，会一直走下去，而走下去是未知的，直到碰到结束标志才会停止，所以arr2打印出来的长度是一个随机值</strong><br><img src="https://img-blog.csdnimg.cn/08bb86b75d9b4a4a9796628b88e90302.png" alt="在这里插入图片描述"></li><li><strong>这个警告出来，是因为没有引入头文件&lt;string.h&gt;，引入就可以安全的使用strlen了</strong></li></ul><h2 id="b）转义字符"><a href="#b）转义字符" class="headerlink" title="b）转义字符"></a>b）转义字符</h2><p><img src="https://img-blog.csdnimg.cn/b97d4d13a85041d5bc3833dc82ba160c.png" alt="在这里插入图片描述"></p><ul><li><em>计算长度</em><br><img src="https://img-blog.csdnimg.cn/6e95cd3d12de4591a40791e6cec50aff.png" alt="在这里插入图片描述"></li><li><strong>这里输出14是因为，\328看上去应该是一个八进制的数据，那应该算一个字符，可以\328的个位是8，而八进制里面只有0-7，没有8.所以\328看成\32转义字符和8，算两个字符</strong></li><li><em>打印一个单引号</em>（\c是打印单个字符）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><em>打印一个字符串，字符串内容是双引号</em></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><em><strong>ASCII码值</strong></em><br><img src="https://img-blog.csdnimg.cn/d906ddb0d7e2408aaaa866f7fe11f29d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/882557a5a84b4a39a416d0b7951f3e67.png" alt="在这里插入图片描述"></li></ul><h2 id="c）注释"><a href="#c）注释" class="headerlink" title="c）注释"></a>c）注释</h2><p>推荐一本书《高质量C&#x2F;C++编程指南》林锐PDF</p><ul><li>定义：用来解释复杂代码</li><li>&#x2F;&#x2F;是C++的注释风格</li><li>&#x2F;**&#x2F;是C语言的注释风格 - 但不支持嵌套注释</li><li><strong>一般来说，习惯用&#x2F;&#x2F;</strong><br><img src="https://img-blog.csdnimg.cn/43d8420fdb134a718cfed18ca72856e3.png" alt="在这里插入图片描述"></li></ul><h1 id="六-选择语句（分支语句）"><a href="#六-选择语句（分支语句）" class="headerlink" title="六. 选择语句（分支语句）"></a>六. 选择语句（分支语句）</h1><h2 id="a）if语句"><a href="#a）if语句" class="headerlink" title="a）if语句"></a>a）if语句</h2><ul><li><strong>语法结构：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种：</span></span><br><span class="line"><span class="keyword">if</span> (表达式)</span><br><span class="line">语句;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种：</span></span><br><span class="line"><span class="keyword">if</span> (表达式)</span><br><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种：多分支</span></span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>)</span><br><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">2</span>)</span><br><span class="line">语句<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句<span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>C语言是如何表示真和假你？ - <strong>非0就是真，0就是假</strong></li><li><strong>注：if、else这些语句都默认只控制一行，若想控制多行，就用{}包起来</strong></li><li><strong>注：else和它离得最近的if匹配，不看缩进对齐</strong></li></ul><h2 id="b）switch语句"><a href="#b）switch语句" class="headerlink" title="b）switch语句"></a>b）switch语句</h2><ul><li>常常用于多分支的情况<br> <img src="https://img-blog.csdnimg.cn/61bf5fd601e94b37ab3924208eb20b54.png" alt="在这里插入图片描述"></li><li>注意：<strong>switch和case后面一定要整型的，而且case后面 还需要是常量或者常量表达式</strong></li><li><strong>字符也可以，因为字符底层存储的是ASCII码 值，值必须要是整型和常量</strong><br> <img src="https://img-blog.csdnimg.cn/0e789838a94b4ad298797f6c34e81ac7.png" alt="在这里插入图片描述"></li><li><strong>这种情况是因为没人阻止case的时候，就会一直跑下去输入几，就从哪个入口进去，前面的不执行</strong></li><li><strong>因此，在每一个case后面都要加上break</strong></li><li><strong>break语句的实际效果就是把语句列表划分为不同的分支部分</strong></li></ul><h3 id="1）default"><a href="#1）default" class="headerlink" title="1）default"></a>1）default</h3><ul><li><strong>所有case语句都不符合，但不会执行任何操作，为了看到是否正确，就可以加default，直接在下面写代码，若输入不符 合case语句，就执行default语句</strong></li><li><strong>同时default没有顺序问题，放哪都行，默认放后面， 只要满足需求，想怎么写就怎么写</strong></li></ul><h1 id="七-循环语句"><a href="#七-循环语句" class="headerlink" title="七. 循环语句"></a>七. 循环语句</h1><h2 id="a）while语句"><a href="#a）while语句" class="headerlink" title="a）while语句"></a>a）while语句</h2><p><img src="https://img-blog.csdnimg.cn/fc608401b430482ba1692daa5473d7d9.png" alt="在这里插入图片描述"></p><ul><li><p>执行流程<br> <img src="https://img-blog.csdnimg.cn/79a37a56cf274664a403f448db1ea57d.png" alt="在这里插入图片描述"></p></li><li><p><strong>在while循环中，break用于永久的终止循环在while循环中，continue的作用是跳过本次循环continue 后面的代码直接去判断部分，看是否进行下一次循环</strong></p></li><li><p><strong>例子，打印0-100之间的奇数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> == i % <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="b）for语句"><a href="#b）for语句" class="headerlink" title="b）for语句"></a>b）for语句</h2><p><img src="https://img-blog.csdnimg.cn/a8634ad682634224aebb1d6548a7d136.png" alt="在这里插入图片描述"></p><ul><li><strong>表达式1为初始化部分，用于初始化循环变量的</strong></li><li><strong>表达式2为条件判断部分，用于判断循环时候终止</strong></li><li><strong>表达式3为调整部分，用于循环条件的调整</strong></li></ul><p>执行流程<br><img src="https://img-blog.csdnimg.cn/f2cb3b2697bc422b844cf690e88eb117.png" alt="在这里插入图片描述"></p><ul><li><strong>for循环特点：初始化只有一次</strong></li></ul><h2 id="c）do-…-while语句"><a href="#c）do-…-while语句" class="headerlink" title="c）do … while语句"></a>c）do … while语句</h2><p><img src="https://img-blog.csdnimg.cn/0e3cc66c0bec42c0beab68dc167df49e.png" alt="在这里插入图片描述"></p><p>执行流程<br><img src="https://img-blog.csdnimg.cn/ff9d915bbc954ad187a176649c214d8b.png" alt="在这里插入图片描述"></p><ul><li><strong>do…while循环是肯定要执行一次的，先不关三七二十一，先执行，再来判断是否要继续循环，另外循环语句可能是一段代码，用{}包起来</strong></li></ul><h2 id="d）goto语句"><a href="#d）goto语句" class="headerlink" title="d）goto语句"></a>d）goto语句</h2><ul><li><strong>C语言中提供了可以随意滥用的 goto语句和标记跳转的标号。从理论上 goto语句是没有必要的，实践中没有goto语句也可以很容易的写出代码</strong></li><li><strong>但是某些场合下goto语句还是用得着的，最常见的用法就是终止程序在某些深度嵌套的结构的处 理过程</strong></li><li><strong>比如：一次跳出两个循环或多个循环</strong><br><img src="https://img-blog.csdnimg.cn/ba3a78f18ba045918dfb9152cf10d2a1.png" alt="在这里插入图片描述"></li><li><strong>另外注意：goto语句只能在一个函数范围内跳转，不能跨函数</strong></li></ul><h1 id="八-函数"><a href="#八-函数" class="headerlink" title="八. 函数"></a>八. 函数</h1><ul><li><strong>特点：简化代码，代码复用</strong></li></ul><h2 id="a）函数分类"><a href="#a）函数分类" class="headerlink" title="a）函数分类"></a>a）函数分类</h2><h3 id="1）库函数"><a href="#1）库函数" class="headerlink" title="1）库函数"></a>1）库函数</h3><ul><li><strong>IO函数 printf scanf getchar putchar</strong> </li><li><strong>字符串操作函数 strcmp strlen</strong> </li><li><strong>字符操作函数 toupper小写转大写</strong> </li><li><strong>内存操作函数 memcpy memcmp mesmset</strong> </li><li><strong>时间&#x2F;日期函数 time</strong> </li><li><strong>数学函数 sqrt pow</strong> </li><li><strong>其他库函数</strong></li></ul><p> <strong>注意：库函数的使用必须调用头文件</strong><br> <img src="https://img-blog.csdnimg.cn/f1ccf350c041491ba1ea0713dcc8bb69.png" alt="在这里插入图片描述"></p><ul><li><strong>使用库函数的参考工具（如上）</strong><br><img src="https://img-blog.csdnimg.cn/d177d545768247d28ecd1b22e48d8f3d.png" alt="在这里插入图片描述"></li></ul><h3 id="2）自定义函数"><a href="#2）自定义函数" class="headerlink" title="2）自定义函数"></a>2）自定义函数</h3><ul><li><strong>自定义函数和库函数一样，有函数名，返回值类型和函数参数。但是不一样的是这些都是我们自己来设计</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/311f47995a2e4ee599b99b6a18f18c86.png" alt="在这里插入图片描述"></p><h2 id="b）函数参数"><a href="#b）函数参数" class="headerlink" title="b）函数参数"></a>b）函数参数</h2><h3 id="1）实际参数（实参）"><a href="#1）实际参数（实参）" class="headerlink" title="1）实际参数（实参）"></a>1）实际参数（实参）</h3><p><img src="https://img-blog.csdnimg.cn/89f5788583b34a17a34a501faf7067a6.png" alt="在这里插入图片描述"></p><ul><li><strong>实参其实就需要传入地址，若改变，原来的值也会改变，因为是同地址</strong></li></ul><h3 id="2）形式参数（形参）"><a href="#2）形式参数（形参）" class="headerlink" title="2）形式参数（形参）"></a>2）形式参数（形参）</h3><p><img src="https://img-blog.csdnimg.cn/566936bb075d45a5a39d90c6617f086b.png" alt="在这里插入图片描述"></p><ul><li><strong>形参只需要传入数值，不会改变原先的值</strong></li></ul><h2 id="c）函数调用"><a href="#c）函数调用" class="headerlink" title="c）函数调用"></a>c）函数调用</h2><h3 id="1）传值调用"><a href="#1）传值调用" class="headerlink" title="1）传值调用"></a>1）传值调用</h3><p><img src="https://img-blog.csdnimg.cn/33d0658d055442fcad51a52c76efc9eb.png" alt="在这里插入图片描述"></p><h3 id="2）传址调用"><a href="#2）传址调用" class="headerlink" title="2）传址调用"></a>2）传址调用</h3><p><img src="https://img-blog.csdnimg.cn/e3366520a94f4c97a362dc46610efe5c.png" alt="在这里插入图片描述"></p><h2 id="d）函数的嵌套调用和链式访问"><a href="#d）函数的嵌套调用和链式访问" class="headerlink" title="d）函数的嵌套调用和链式访问"></a>d）函数的嵌套调用和链式访问</h2><ul><li><strong>函数和函数之间可以根据实际的需求 进行组合的，也就是互相调用的</strong></li></ul><h3 id="1）嵌套调用"><a href="#1）嵌套调用" class="headerlink" title="1）嵌套调用"></a>1）嵌套调用</h3><p><img src="https://img-blog.csdnimg.cn/2a3b738f88534adab69b8bef469adc05.png" alt="在这里插入图片描述"></p><ul><li><strong>注意：函数可以嵌套调用，但不能嵌套定义</strong></li></ul><h3 id="2）链式访问"><a href="#2）链式访问" class="headerlink" title="2）链式访问"></a>2）链式访问</h3><p><img src="https://img-blog.csdnimg.cn/39c637c5725d416b951e27b18f204b5d.png" alt="在这里插入图片描述"></p><ul><li><strong>把一个函数的返回值作为另外一个函数的参数</strong></li></ul><p><strong>例如：</strong><br><img src="https://img-blog.csdnimg.cn/af05d5dfefd4434b93d9c6104953c74a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cc4d85213d7944dab956db6cbc651121.png" alt="在这里插入图片描述"></p><ul><li><strong>答案为4321</strong></li><li><strong>由于printf返回的是打印在屏幕上的字符的个数</strong></li></ul><h2 id="e）函数的声明和定义"><a href="#e）函数的声明和定义" class="headerlink" title="e）函数的声明和定义"></a>e）函数的声明和定义</h2><h3 id="1）函数声明"><a href="#1）函数声明" class="headerlink" title="1）函数声明"></a>1）函数声明</h3><ol><li><strong>告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。 但是具体是不是存在，函数声明决定不了</strong> </li><li><strong>函数的声明一般出现在函数的使用之前。要满足先声明后使用</strong> </li><li><strong>函数的声明一般要放在头文件中的</strong><br><img src="https://img-blog.csdnimg.cn/afad192c3f924fba92bcfbdc92abf095.png" alt="在这里插入图片描述"></li></ol><h3 id="2）函数定义"><a href="#2）函数定义" class="headerlink" title="2）函数定义"></a>2）函数定义</h3><ul><li><strong>函数的定义是指函数的具体实现，交待函数的功能实现</strong><br> <img src="https://img-blog.csdnimg.cn/9329eb6d99d7401eb6668c9267a16fee.png" alt="在这里插入图片描述"></li></ul><h2 id="f）函数递归"><a href="#f）函数递归" class="headerlink" title="f）函数递归"></a>f）函数递归</h2><ul><li>一个过程或函数在其定义或说明中有直接或间接调用自身的，一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。</li><li>只需少量的程序就可描述出解题过程所需要的多 次重复计算，大大地减少了程序的代码量</li><li><strong>递归的主要思考方式在于：把大事化小</strong></li></ul><p><strong>递归的两个必要条件</strong></p><ol><li><strong>存在限制条件，当满足这个限制条件的时候，递归便不再继续。</strong></li><li><strong>每次递归调用之后越来越接近这个限制条件</strong></li></ol><h1 id="九-数组"><a href="#九-数组" class="headerlink" title="九. 数组"></a>九. 数组</h1><ul><li>C语言中给了数组的定义：一组相同类型元素的集合</li><li>C语言规定：数组的每个元素都有一个下标，下标是从0开始的</li><li>因此，数组可以通过下标进行访问<br><img src="https://img-blog.csdnimg.cn/3e73ecec6e4540ff81aa6ac13a10fa6b.png" alt="在这里插入图片描述"></li><li><strong>数组的大小可以通过计算得到，用sizeof，总大小 &#x2F; 首元素大小</strong></li><li><strong>不能用strlen来求，因为strlen求的是字符串的大 小，而字符串是有结束符号的，而数组里是没有 字符串结束符号\0</strong></li></ul><p> <img src="https://img-blog.csdnimg.cn/b45b71ef0d70499cbb9920d420fab535.png" alt="在这里插入图片描述"></p><ul><li><strong>不完全初始化，剩余默认为0</strong></li><li><strong>除号两端都是整数，执行整数除法，如果有一端是小数，执行小数除法</strong></li></ul><h2 id="a）一维数组"><a href="#a）一维数组" class="headerlink" title="a）一维数组"></a>a）一维数组</h2><ol><li><strong>一维数组在内存中是连续存放的</strong> </li><li><strong>随着数组下标的增长，地址是由低到高的</strong></li></ol><h3 id="1）一维数组的创建"><a href="#1）一维数组的创建" class="headerlink" title="1）一维数组的创建"></a>1）一维数组的创建</h3><p><img src="https://img-blog.csdnimg.cn/7af5cad8d0474b3d99716b7ff38aa7a0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c72340527e574dfca13dab4b3723104d.png" alt="在这里插入图片描述"></p><ul><li><strong>注意：一定要用常量表达式</strong></li><li><strong>这种变量的表达式dev C++支持，C99也支持，VS不支持变长数组</strong></li><li><strong>变长数组 - 数组的大小是变量</strong></li><li><strong>数组创建，在C99标准之前， [] 中要给一个常量才可以，不能使用变量。在C99标准支持了变长数组的概念</strong></li></ul><h3 id="2）一维数组的初始化"><a href="#2）一维数组的初始化" class="headerlink" title="2）一维数组的初始化"></a>2）一维数组的初始化</h3><p><img src="https://img-blog.csdnimg.cn/54ae76c55c2d475cb4d1a5dc3019f319.png" alt="在这里插入图片描述"></p><h2 id="b）二维数组"><a href="#b）二维数组" class="headerlink" title="b）二维数组"></a>b）二维数组</h2><ul><li><strong>二维数组随着数组下标的增长，地址也是由低到高的</strong></li></ul><h3 id="1）二维数组的创建"><a href="#1）二维数组的创建" class="headerlink" title="1）二维数组的创建"></a>1）二维数组的创建</h3><p><img src="https://img-blog.csdnimg.cn/e99c3181402f4ad393993cac02914cc8.png" alt="在这里插入图片描述"></p><h3 id="2）二维数组的初始化"><a href="#2）二维数组的初始化" class="headerlink" title="2）二维数组的初始化"></a>2）二维数组的初始化</h3><p><img src="https://img-blog.csdnimg.cn/07269308058b49bba3f062041e4c3bfd.png" alt="在这里插入图片描述"></p><ul><li><strong>二维数组如果可以初始化，行可以省略，但列不能省略</strong></li></ul><h2 id="c）数组越界"><a href="#c）数组越界" class="headerlink" title="c）数组越界"></a>c）数组越界</h2><ul><li><strong>数组的下标是有范围限制的</strong> </li><li><strong>数组的下规定是从0开始的，如果数组有n个元素，最后一个元素的下标就是n-1</strong> </li><li><strong>所以数组的下标如果小于0，或者大于n-1，就是数组越界访问了，超出了数组合法空间的访问</strong></li><li><strong>注意：C语言本身是不做数组下标的越界检查，编译器也不一定报错，但是编译器不报错，并不意味着程序就是正确的</strong></li></ul><h2 id="d）数组作为函数参数"><a href="#d）数组作为函数参数" class="headerlink" title="d）数组作为函数参数"></a>d）数组作为函数参数</h2><ul><li><strong>数组传参的时候，传递的其实是数组首元素的地址</strong></li><li><strong>数组传参一般也要传入总大小，即sizeof。因此sizeof需要在主函数里创建</strong></li></ul><h2 id="e）数组名"><a href="#e）数组名" class="headerlink" title="e）数组名"></a>e）数组名</h2><ul><li><strong>数组名是数组首元素地址</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/4b898f70e090497d9295c113241bead0.png" alt="在这里插入图片描述"></p><ul><li><strong>&amp;arr[0]与arr的返回值相同，两者的意思相同，而&amp;arr和arr的返回值相同，但表达的意思不同</strong></li><li><strong>arr取出来的是首元素的地址</strong></li><li><strong>&amp;arr取出来的是整个数组的地址，而整个数组的 地址，也是从首元素开始，所以地址就是首元素 的地址</strong></li></ul><p><strong>但也有两个例外</strong></p><ol><li><strong>sizeof(数组名)，计算整个数组的大小，sizeof内部单独放一个数组名，数组名表示整个数组</strong></li><li><strong>&amp;数组名，取出的是数组的地址。&amp;数组名，数组名表示整个数组</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/bc41eaf7f51d451b9b5275cd4506c814.png" alt="在这里插入图片描述"></p><ul><li><strong>arr+1取出来的地址与arr只相差4</strong></li><li><strong>&amp;arr+1取出来的地址与&amp;arr相差了40，即相差整个数组</strong></li></ul><h1 id="十-操作符"><a href="#十-操作符" class="headerlink" title="十. 操作符"></a>十. 操作符</h1><h2 id="a）算术操作符"><a href="#a）算术操作符" class="headerlink" title="a）算术操作符"></a>a）算术操作符</h2><ul><li>加  减  乘  除  取余（+  -  *  &#x2F;  %）<br><img src="https://img-blog.csdnimg.cn/7fa8900e5e13459da045fd384affe1ea.png" alt="在这里插入图片描述"></li></ul><ol><li><strong>除了 % 操作符之外，其他的几个操作符可以作用于整数和浮点数</strong></li><li><strong>对于 &#x2F; 操作符如果两个操作数都为整数，执行整数 除法。而只要有一边是浮点数执行的就是浮点数除法</strong></li><li><strong>% 操作符的两个操作数必须为整数。返回的是整除之后的余数</strong></li></ol><h2 id="b）移位操作符"><a href="#b）移位操作符" class="headerlink" title="b）移位操作符"></a>b）移位操作符</h2><ul><li>右移  左移（&gt;&gt;  &lt;&lt;）</li></ul><h3 id="1）左移"><a href="#1）左移" class="headerlink" title="1）左移"></a>1）左移</h3><ul><li><strong>二进制移动位数，总体移，左移：左边抛弃、右边补0</strong><br> <img src="https://img-blog.csdnimg.cn/c3b9f22f43334a31bddcbd7232e5ae9e.png" alt="在这里插入图片描述"></li></ul><h3 id="2）右移"><a href="#2）右移" class="headerlink" title="2）右移"></a>2）右移</h3><ul><li><strong>编译器中一般采用算术移位</strong></li></ul><h4 id="x1）逻辑移位"><a href="#x1）逻辑移位" class="headerlink" title="x1）逻辑移位"></a>x1）逻辑移位</h4><ul><li><strong>左边用0填充，右边丢弃</strong></li></ul><h4 id="x2）算术移位"><a href="#x2）算术移位" class="headerlink" title="x2）算术移位"></a>x2）算术移位</h4><ul><li><strong>左边用原该值的符号位填充，右边丢弃</strong></li></ul><p><strong>注意点：</strong></p><ol><li><strong>移位操作符的操作数只能是整</strong>数</li><li><strong>参与左移或者右移的操作符，在没被赋值的情况下，不会改变原先的值，即b &#x3D; a &lt;&lt; 1。a的值不变</strong></li><li><strong>不管左移还是右移，都是补码在移动，因此要注意负数先将其转换成补码，再来运算</strong></li></ol><h2 id="c）位操作符"><a href="#c）位操作符" class="headerlink" title="c）位操作符"></a>c）位操作符</h2><h3 id="1）-amp-按位与"><a href="#1）-amp-按位与" class="headerlink" title="1）&amp;:按位与"></a>1）&amp;:按位与</h3><ul><li>参与运算的两数各对应的二进位相与。只要对应的二个二进位都为1时，结果位就为1</li></ul><h3 id="2）-按位或"><a href="#2）-按位或" class="headerlink" title="2）|:按位或"></a>2）|:按位或</h3><ul><li>参与运算的两数各对应的二进位相或。只要对应的二个二进位有一个为1时，结果位就为1</li></ul><h3 id="3）-按位异或"><a href="#3）-按位异或" class="headerlink" title="3）^:按位异或"></a>3）^:按位异或</h3><ul><li>两个相应的二进制位值不同则为1,否则为0</li></ul><p><strong>注意点：</strong></p><ul><li><strong>都以补码的形式出现，即用补码来进行按位操作，如果是负数，还要考虑第一位，要转换成补码在来运算</strong></li><li><strong>他们的操作数必须是整数</strong></li></ul><h2 id="d）赋值操作符"><a href="#d）赋值操作符" class="headerlink" title="d）赋值操作符"></a>d）赋值操作符</h2><p><img src="https://img-blog.csdnimg.cn/4f5e611ca4dd41fca5bc5413730a98d0.png" alt="在这里插入图片描述"></p><h2 id="e）单目操作符"><a href="#e）单目操作符" class="headerlink" title="e）单目操作符"></a>e）单目操作符</h2><p><img src="https://img-blog.csdnimg.cn/308a7738699748e2b7f4003136f97c4b.png" alt="在这里插入图片描述"></p><h3 id="1）！逻辑反操作"><a href="#1）！逻辑反操作" class="headerlink" title="1）！逻辑反操作"></a>1）！逻辑反操作</h3><ul><li>0表示假，1表示真，把真变成假，把假变成真</li></ul><h3 id="2）sizeof"><a href="#2）sizeof" class="headerlink" title="2）sizeof"></a>2）sizeof</h3><ul><li>是一个操作符，不是函数，用来计算类型或者变量的大小</li><li><strong>函数后面的括号不能删去，而操作符后面的括号 可以省去（判别是否为函数的方法）</strong></li><li><strong>一个数组的大小为4byte（字节）</strong><br><img src="https://img-blog.csdnimg.cn/93a244f9623443038ea72290ddb37447.png" alt="在这里插入图片描述"></li><li><strong>short的单位为2字节</strong> </li><li><strong>sizeof括号里是不进行运算的</strong></li></ul><h3 id="3）-按（二进制）位取法"><a href="#3）-按（二进制）位取法" class="headerlink" title="3）~ 按（二进制）位取法"></a>3）~ 按（二进制）位取法</h3><ul><li>把所有二进制中数字，1变成0，0变成1</li><li>0的二进制：0000000000000000000000000000000 </li><li>按位取法转换后：11111111111111111111111111111111</li></ul><p><strong>补充：整数在内存中存储的是补码~，所以要将其转换成原码</strong></p><ul><li><strong>一个整数的二进制表示有三种：原码、反码、补码</strong></li><li><strong>因为一个数组大小为4个字节，也就是32bit，转换成二进制就是32位</strong><br><img src="https://img-blog.csdnimg.cn/b0a6656c49da49d3b4f3be49a1749b89.png" alt="在这里插入图片描述"></li><li><strong>注：正整数：原码、反码、补码相同</strong></li></ul><h3 id="4）-前置、后置"><a href="#4）-前置、后置" class="headerlink" title="4）++ 前置、后置++"></a>4）++ 前置、后置++</h3><ul><li><p><em><strong>前置++ 先++，后使用</strong></em><br><img src="https://img-blog.csdnimg.cn/a1dcd02b32df4640953410b6782ac154.png" alt="在这里插入图片描述"></p></li><li><p><em><strong>后置++ 先使用，后++</strong></em><br><img src="https://img-blog.csdnimg.cn/5b8a879deecb44ecb69ca62828567cdb.png" alt="在这里插入图片描述"></p></li></ul><h3 id="5）–-前置、后置-–"><a href="#5）–-前置、后置-–" class="headerlink" title="5）– 前置、后置 –"></a>5）– 前置、后置 –</h3><ul><li>同理于4）++前置、后置++</li></ul><h3 id="6）（类型）强制类型转换"><a href="#6）（类型）强制类型转换" class="headerlink" title="6）（类型）强制类型转换"></a>6）（类型）强制类型转换</h3><p> <img src="https://img-blog.csdnimg.cn/1925d942b64948cfaf9d3415fc8f75fa.png" alt="在这里插入图片描述"></p><h3 id="7）-amp-取地址操作符-解引用操作符"><a href="#7）-amp-取地址操作符-解引用操作符" class="headerlink" title="7）&amp; 取地址操作符     * 解引用操作符"></a>7）&amp; 取地址操作符     * 解引用操作符</h3><p> <img src="https://img-blog.csdnimg.cn/f6dd81378ddb4ec6a787be303e24c944.png" alt="在这里插入图片描述"></p><h2 id="f）关系操作符"><a href="#f）关系操作符" class="headerlink" title="f）关系操作符"></a>f）关系操作符</h2><p><img src="https://img-blog.csdnimg.cn/7ca26f817f91489d903cfa4e903f18d0.png" alt="在这里插入图片描述"></p><ul><li><strong>个等号是赋值，两个等号是判断</strong></li><li><strong>字符串的相等需要用到strcmp函数，不能用两个等号判断</strong></li></ul><h2 id="g）逻辑操作符"><a href="#g）逻辑操作符" class="headerlink" title="g）逻辑操作符"></a>g）逻辑操作符</h2><p><img src="https://img-blog.csdnimg.cn/fa808525866942ce917cf3af4ef0f3a4.png" alt="在这里插入图片描述"></p><ul><li><strong>逻辑操作符（0为假，1为真）</strong></li></ul><ol><li><strong>&amp;&amp; - 逻辑与（只有两个都为真时才为真）</strong></li></ol><ul><li><strong>当逻辑与已经判断为假时，后面的就不用在进行了</strong></li></ul><ol start="2"><li><strong>|| - 逻辑或（只有两个都为假才为假）</strong></li></ol><ul><li><strong>当逻辑或为真时，后面就不用在进行了</strong></li></ul><h2 id="h）条件操作符"><a href="#h）条件操作符" class="headerlink" title="h）条件操作符"></a>h）条件操作符</h2><p><img src="https://img-blog.csdnimg.cn/aa226202410645adb2d0f8861171cb7d.png" alt="在这里插入图片描述"></p><ul><li><strong>exp1 成立，exp2表达式计算，整个表达式的结果是：exp2的结果</strong> </li><li><strong>exp1不成立，exp3表达式计算，整个表达式的结果是：exp3的结果</strong></li></ul><h2 id="i）逗号表达式"><a href="#i）逗号表达式" class="headerlink" title="i）逗号表达式"></a>i）逗号表达式</h2><p><img src="https://img-blog.csdnimg.cn/e225e8e2f7ad4abbbfe92bcbaf150822.png" alt="在这里插入图片描述"></p><ul><li>逗号隔开的一串表达式<br> <img src="https://img-blog.csdnimg.cn/ed8c2c73d771427fabca1fb6baa80754.png" alt="在这里插入图片描述"></li><li><strong>从左到右依此计算的</strong></li><li><strong>整个表达式的结果是最后一个表达式的结果</strong></li><li><strong>有些时候可能前面的表达式并没有作用，但是还是要注意看</strong></li></ul><h2 id="j）下标引用、函数调用和结构成员"><a href="#j）下标引用、函数调用和结构成员" class="headerlink" title="j）下标引用、函数调用和结构成员"></a>j）下标引用、函数调用和结构成员</h2><p><img src="https://img-blog.csdnimg.cn/f02bea04fcc44174b16dd6296e461f5d.png" alt="在这里插入图片描述"></p><h3 id="1）下标引用"><a href="#1）下标引用" class="headerlink" title="1）下标引用[]"></a>1）下标引用[]</h3><p><img src="https://img-blog.csdnimg.cn/58294d1f06e54fd3a6b169d2714787ab.png" alt="在这里插入图片描述"></p><ul><li><strong>操作数：一个数组名 + 一个索引值</strong><br><img src="https://img-blog.csdnimg.cn/10cac2d054b14eebbede54342dbde675.png" alt="在这里插入图片描述"></li></ul><h3 id="2）函数调用"><a href="#2）函数调用" class="headerlink" title="2）函数调用()"></a>2）函数调用()</h3><p><img src="https://img-blog.csdnimg.cn/61af97357e214f3cb089d4e77fb43fbf.png" alt="在这里插入图片描述"></p><ul><li><strong>接受一个或者多个操作数：第一个操作数是函数名，剩余的操作数就是传递给函数的参数</strong><br><img src="https://img-blog.csdnimg.cn/b671078811974e5091cb8913c2f9f548.png" alt="在这里插入图片描述"></li></ul><h2 id="k）表达式求值"><a href="#k）表达式求值" class="headerlink" title="k）表达式求值"></a>k）表达式求值</h2><ul><li><strong>在使用这些操作符的时候，需要注意各种运算顺序</strong></li></ul><h3 id="1）隐式类型转换"><a href="#1）隐式类型转换" class="headerlink" title="1）隐式类型转换"></a>1）隐式类型转换</h3><ul><li><strong>C的整型算术运算总是至少以缺省整型类型的精度来进行的。为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为整型提升</strong></li></ul><h4 id="x1）整形提升"><a href="#x1）整形提升" class="headerlink" title="x1）整形提升"></a>x1）整形提升</h4><ul><li><strong>整形提升是按照变量的数据类型的符号位来提升的</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/c16396ca5cc34bcb827f21707e726c16.png" alt="在这里插入图片描述"></p><ul><li><strong>按照符号位来提升，符号位为0就全为0， 符号为1，就高位补充1</strong> </li><li><strong>都是用补码进行整型提升，因此负数要格外注意</strong> </li><li><strong>只有当自身的大小不足int类型的大小（4个字节）才需要进行整形提升</strong> </li><li><strong>比int大的不需要整形提升</strong> </li><li><strong>而需要整形提升的只有char类型和short类型，因为char类型是1个字节，short类型是2个字节</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/4e5edbf716e34e18ad511620a787db46.png" alt="在这里插入图片描述"></p><ul><li><strong>+c和-c是参与运算的，因此需要整型提升</strong> </li><li><strong>%u就是打印一个无符号数</strong> </li><li><strong>%d是打印有符号整数</strong></li></ul><h3 id="2）算术转换"><a href="#2）算术转换" class="headerlink" title="2）算术转换"></a>2）算术转换</h3><ul><li><strong>如果某个操作符的各个操作数属于不同的类型， 那么除非其中一个操作数的转换为另一个操作数的类型，否则操作就无法进行</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/655cee65e174452bbf630ff54a799c17.png" alt="在这里插入图片描述"></p><ul><li><strong>这个是向上转换的，比如int和float进行组合，就需要将int转换成float类型</strong> </li><li><strong>如果某个操作数的类型在上面这个列表中排名较低，那么首先要转换为另外一个操作数的类型后执行运算</strong></li></ul><h3 id="3）操作符的属性"><a href="#3）操作符的属性" class="headerlink" title="3）操作符的属性"></a>3）操作符的属性</h3><p><strong>复杂表达式的求值有三个影响的因素</strong></p><ol><li><strong>操作符的优先级</strong> </li><li><strong>操作符的结合性</strong> </li><li><strong>是否控制求值顺序</strong></li></ol><ul><li><strong>两个相邻的操作符先执行哪个？取决于他们的优先级。如果两者的优先级相同，取决于他们的结合性。操作符优先级</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/d5c4e8c1576e4fd7a34f1ea40fbebb18.png" alt="在这里插入图片描述"></p><ul><li><strong>从上往下，优先级是从高到低</strong> </li><li><strong>结合性</strong></li></ul><ol><li><strong>N&#x2F;A：说明无结合性，不需要考虑结合性</strong> </li><li><strong>L-R：从左向右结合</strong> </li><li><strong>R-L：从右向左结合</strong></li></ol><ul><li><strong>是否控制求值顺序：就是当前面的判断可以代表 全部时，后面的就可以不需要进行</strong></li><li><strong>有4个：逻辑与、逻辑或、条件操作符、逗号操作符</strong></li></ul><h1 id="十一-常见关键字"><a href="#十一-常见关键字" class="headerlink" title="十一. 常见关键字"></a>十一. 常见关键字</h1><ul><li><strong>C语言提供的，不能自己创建关键字</strong></li><li><strong>关键字不能做变量名</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/a2e622ee173f4e93948ae1f89c962187.png" alt="在这里插入图片描述"></p><h2 id="a）auto"><a href="#a）auto" class="headerlink" title="a）auto"></a>a）auto</h2><ul><li>自动的 - 每个局部变量都是auto修饰的</li></ul><h2 id="b）extern"><a href="#b）extern" class="headerlink" title="b）extern"></a>b）extern</h2><ul><li>用来声明外部符号的</li><li>声明不需要指定的值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_val;</span><br></pre></td></tr></table></figure><h2 id="c）register"><a href="#c）register" class="headerlink" title="c）register"></a>c）register</h2><ul><li>寄存器关键字<br><img src="https://img-blog.csdnimg.cn/d1266ba9f42d4fa7b0c36c8f9795a2d7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/aa7794d342814f4182e56fd81ab2ddb0.png" alt="在这里插入图片描述"></li></ul><h2 id="d）signed"><a href="#d）signed" class="headerlink" title="d）signed"></a>d）signed</h2><ul><li>有符号的，比如10，-20</li></ul><h2 id="e）unsigned"><a href="#e）unsigned" class="headerlink" title="e）unsigned"></a>e）unsigned</h2><ul><li>无符号的</li></ul><h2 id="f）static"><a href="#f）static" class="headerlink" title="f）static"></a>f）static</h2><ul><li>静态的</li></ul><h3 id="1）static修饰局部变量"><a href="#1）static修饰局部变量" class="headerlink" title="1）static修饰局部变量"></a>1）static修饰局部变量</h3><ul><li><strong>改变了局部变量的生命周期（本质上改变了变量的存储类型）</strong></li><li><strong>本身局部变量在所在范围结束后，就会自动销毁，而static修饰局部变量后，就不会销毁，直到程序结束</strong></li><li><strong>让静态局部变量出了作用域依然存在，到程序结束，生命周期才结束</strong></li></ul><h3 id="2）static修饰全局变量"><a href="#2）static修饰全局变量" class="headerlink" title="2）static修饰全局变量"></a>2）static修饰全局变量</h3><ul><li><strong>使得整个全局变量只能在自己所在的源文件(.c) 内部可以使用，而其他源文件不能使用</strong><br><img src="https://img-blog.csdnimg.cn/4398362fba724ff8a3de128815190a63.png" alt="在这里插入图片描述"></li><li>经过static修饰后<br><img src="https://img-blog.csdnimg.cn/27b0bd45e4494fb1ad3e060f40560eea.png" alt="在这里插入图片描述"></li><li><strong>全局变量，在其他源文件内部可以被使用。是因为全局变量具有外部链接属性，但是被static修饰后，就变成了内部链接属性，其他源文件就不能链接到整个静态的全局变量了</strong></li></ul><h3 id="3）static修饰函数"><a href="#3）static修饰函数" class="headerlink" title="3）static修饰函数"></a>3）static修饰函数</h3><p><img src="https://img-blog.csdnimg.cn/1879c91012c74b1888d950840ae4fcfd.png" alt="在这里插入图片描述"></p><ul><li><strong>使得函数只能在自己所在的源文件内部使用，不能在其他源文件内部使用</strong></li><li><strong>本质上，static是将函数的外部链接属性变成了内部链接属性！（和static修饰全局变量一样）</strong></li></ul><h2 id="g）union"><a href="#g）union" class="headerlink" title="g）union"></a>g）union</h2><ul><li>联合体（共用体）</li></ul><h2 id="h）void"><a href="#h）void" class="headerlink" title="h）void"></a>h）void</h2><ul><li>无-空</li></ul><h2 id="i）typedef"><a href="#i）typedef" class="headerlink" title="i）typedef"></a>i）typedef</h2><ul><li>类型定义（类型重命名）<br><img src="https://img-blog.csdnimg.cn/203f4e51e61e46a889176c2fbe2f155c.png" alt="在这里插入图片描述"></li><li><strong>将 unsigned int 重命名为 u_int</strong></li></ul><p><em><strong>补充：</strong></em></p><ul><li><strong>define - 是不是关键字？NO - 预处理指令</strong></li><li><strong>include - 是不是关键字？NO - 预处理指令</strong></li></ul><h1 id="十二-define定义常量和宏"><a href="#十二-define定义常量和宏" class="headerlink" title="十二. define定义常量和宏"></a>十二. define定义常量和宏</h1><h2 id="a）define定义常量"><a href="#a）define定义常量" class="headerlink" title="a）define定义常量"></a>a）define定义常量</h2><p><img src="https://img-blog.csdnimg.cn/8018e42eac1e4b168fad773ba4e4082c.png" alt="在这里插入图片描述"></p><h2 id="b）define定义宏"><a href="#b）define定义宏" class="headerlink" title="b）define定义宏"></a>b）define定义宏</h2><p><img src="https://img-blog.csdnimg.cn/e7429928d14e45e4b1c7165de772ac8e.png" alt="在这里插入图片描述"></p><h1 id="十三-指针"><a href="#十三-指针" class="headerlink" title="十三. 指针"></a>十三. 指针</h1><h2 id="a）指针的基本认识"><a href="#a）指针的基本认识" class="headerlink" title="a）指针的基本认识"></a>a）指针的基本认识</h2><ul><li><strong>内存怎么编号？</strong><br>  <strong>32位 - 32根地址线 - 物理线 - 通电 - 正电1&#x2F;负电0<br>  64位同理</strong></li><li><strong>一个这样的内存单元多大</strong><br><img src="https://img-blog.csdnimg.cn/8d35e64e1e1f458d9edb849eba810051.png" alt="在这里插入图片描述"></li><li><strong>指针都是4个字节（32位）</strong></li><li><strong>一个内存单元是一个字节，然后分配地址</strong><br><img src="https://img-blog.csdnimg.cn/9ef42ce05b8146ea8df70dd9b2e6ff9c.png" alt="在这里插入图片描述"></li><li>打印地址<br><img src="https://img-blog.csdnimg.cn/976dc0d2fbcf493c9c4ffd3732a425be.png" alt="在这里插入图片描述"></li><li><strong>取出变量地址：a有4个字节，每一个字节代表一个地址，取出来的是较小的地址（第一个地址）</strong></li><li><strong>%p专门用来打印地址</strong></li><li><strong>pa用来存放地址，在C语言中叫pa是指针变量</strong></li><li>*<strong>说明pa是指针变量</strong></li><li><strong>int 说明pa指向的对象是int类型的</strong></li></ul><p>储存地址，需要定义指针变量<br><img src="https://img-blog.csdnimg.cn/58a33c3df24e41e794429d54385470fa.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/17be72fca5fb4bf6858501ea1f044e77.png" alt="在这里插入图片描述"></p><ul><li><strong>指针还可以解引用，可以间接改变数值</strong></li></ul><p><strong>总结：</strong></p><ul><li><p><strong>指针的大小是相同的！，32位系统是4， 64位系统是8</strong> </p></li><li><p><strong>指针是用来存放地址的</strong></p></li><li><p><strong>指针需要多大空间，取决于地址的存储需要多大空间<br>  32位 32bit - 4byte    <br>  64位 64bit - 8byte</strong></p><h2 id="b）指针的意义"><a href="#b）指针的意义" class="headerlink" title="b）指针的意义"></a>b）指针的意义</h2><ol><li><strong>指针类型决定了：指针解引用的权限有多大，char - 1个字节，int - 4个字节， double - 8个字节</strong> </li><li><strong>指针类型决定了,指针走一步，能走多远（步长）</strong></li></ol></li><li><p><strong>char</strong>* 的指针解引用就只能访问一个字节，而 int* 的指针的解引用就能访问四个字节**</p><h2 id="c）野指针"><a href="#c）野指针" class="headerlink" title="c）野指针"></a>c）野指针</h2><h3 id="1）指针未初始化"><a href="#1）指针未初始化" class="headerlink" title="1）指针未初始化"></a>1）指针未初始化</h3><p>   <img src="https://img-blog.csdnimg.cn/0b3666528fde4ccbbf5be62a54077dd9.png" alt="在这里插入图片描述"></p><h3 id="2）指针越界访问"><a href="#2）指针越界访问" class="headerlink" title="2）指针越界访问"></a>2）指针越界访问</h3><p>   <img src="https://img-blog.csdnimg.cn/b934cbc4696549b0a6f9b93b816a106c.png" alt="在这里插入图片描述"></p><h3 id="3）指针指向的空间释放"><a href="#3）指针指向的空间释放" class="headerlink" title="3）指针指向的空间释放"></a>3）指针指向的空间释放</h3><p>   <img src="https://img-blog.csdnimg.cn/6126ed970c2d4be4b5e9ddd71ba71e6e.png" alt="在这里插入图片描述"></p><ul><li><strong>当a被使用后，退出函数后a会被回收，因此在使用*p的时候</strong>，*<strong>p就不能变化了，因为a消失了</strong></li></ul></li></ul><h2 id="d-如何规避野指针"><a href="#d-如何规避野指针" class="headerlink" title="d)如何规避野指针"></a>d)如何规避野指针</h2><h3 id="1）指针初始化"><a href="#1）指针初始化" class="headerlink" title="1）指针初始化"></a>1）指针初始化</h3><h3 id="2）小心指针越界"><a href="#2）小心指针越界" class="headerlink" title="2）小心指针越界"></a>2）小心指针越界</h3><h3 id="3）指针指向空间释放即使置NULL"><a href="#3）指针指向空间释放即使置NULL" class="headerlink" title="3）指针指向空间释放即使置NULL"></a>3）指针指向空间释放即使置NULL</h3><p> <img src="https://img-blog.csdnimg.cn/bf3b093adb1e4554951829d34159ff0b.png" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/debabcac90104ac4be599716ff5b7a86.png" alt="在这里插入图片描述"></p><ul><li><strong>当他指向的空间被释放的时候，也指向空指针指向有效空间，就给有效地址</strong> </li><li><strong>因此要么空指针，要么有效地址</strong> </li><li><strong>因此给他一个if判断，判断是不是空指针，不是空指针的时候才是有效地址</strong><br><img src="https://img-blog.csdnimg.cn/2842c20e556746c982e9b968daa504af.png" alt="在这里插入图片描述"></li></ul><h3 id="4）避免返回局部变量的地址"><a href="#4）避免返回局部变量的地址" class="headerlink" title="4）避免返回局部变量的地址"></a>4）避免返回局部变量的地址</h3><h3 id="5）指针使用之前检查有效性"><a href="#5）指针使用之前检查有效性" class="headerlink" title="5）指针使用之前检查有效性"></a>5）指针使用之前检查有效性</h3><h2 id="e）指针运算"><a href="#e）指针运算" class="headerlink" title="e）指针运算"></a>e）指针运算</h2><h3 id="1）指针-整数"><a href="#1）指针-整数" class="headerlink" title="1）指针+-整数"></a>1）指针+-整数</h3><p> <img src="https://img-blog.csdnimg.cn/38a44e7a296e4614b94ab4224c9ad422.png" alt="在这里插入图片描述"></p><h3 id="2）指针-指针"><a href="#2）指针-指针" class="headerlink" title="2）指针-指针"></a>2）指针-指针</h3><p> <img src="https://img-blog.csdnimg.cn/87b38bdc24e24295b38f1a0844df8fa7.png" alt="在这里插入图片描述"></p><h3 id="3）指针的关系运算"><a href="#3）指针的关系运算" class="headerlink" title="3）指针的关系运算"></a>3）指针的关系运算</h3><p> <img src="https://img-blog.csdnimg.cn/958ac6f7c7ad4aa285d8eea1afc651ee.png" alt="在这里插入图片描述"></p><ul><li><strong>实际在绝大部分的编译器上是可以顺利完成任务的，然而我们还是应该避免这样写，因为标准并不保证它可行</strong> </li><li><strong>标准规定：允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较</strong><br><img src="https://img-blog.csdnimg.cn/668c87af25f34a66a4f1fb2910fcd25c.png" alt="在这里插入图片描述"></li><li><strong>指针往前越界不合适 往后越界时为了拿到地址</strong></li></ul><h2 id="f）指针和数组"><a href="#f）指针和数组" class="headerlink" title="f）指针和数组"></a>f）指针和数组</h2><p> <img src="https://img-blog.csdnimg.cn/dd96525af4914b4a9d2ab4da753dc0c8.png" alt="在这里插入图片描述"></p><h2 id="g）二级指针"><a href="#g）二级指针" class="headerlink" title="g）二级指针"></a>g）二级指针</h2><p> <img src="https://img-blog.csdnimg.cn/5427123d7eb846f980d87bde4813bbba.png" alt="在这里插入图片描述"></p><h2 id="h）指针数组"><a href="#h）指针数组" class="headerlink" title="h）指针数组"></a>h）指针数组</h2><p> <img src="https://img-blog.csdnimg.cn/168aebca532b433cb2e6aee18a600022.png" alt="在这里插入图片描述"></p><h1 id="十四-结构体"><a href="#十四-结构体" class="headerlink" title="十四. 结构体"></a>十四. 结构体</h1><ul><li>使得C语言有能力描述复杂对象<br> <img src="https://img-blog.csdnimg.cn/b532aa2592644df49e4c7f9fcad91e44.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d5ddb164456d48bd8dd6142b1274a439.png" alt="在这里插入图片描述"><br><strong>说明：</strong></li><li><strong>打印单精度就%f , 打印双精度就%lf， 这是字母L，不是数字1</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/9572c1e85e7a4eafaed5f2571eb3ef17.png" alt="在这里插入图片描述"><br><strong>结构的声明</strong><br><img src="https://img-blog.csdnimg.cn/c3aebeffddcd4c1ca5e6c20fd1976d32.png" alt="在这里插入图片描述"></p><ul><li><strong>struck是固定的语法结构 注意后面还有分号；定义创建了一个自定义的类型</strong><br><img src="https://img-blog.csdnimg.cn/a286dbc7548f4b1886f848978604b769.png" alt="在这里插入图片描述"></li><li><strong>结构的成员可以是标量、数组、指针，甚至是其他结构体</strong><br><img src="https://img-blog.csdnimg.cn/d47c07cfef93477baea655472c6820be.png" alt="在这里插入图片描述"></li><li><strong>print1是传值调用 print2是传址调用 print2更好</strong></li><li><strong>print1传入是实参传给形参，s有多大，t就要有多大空间</strong> </li><li><strong>print1的改变不会影响s，改变不了s</strong> </li><li><strong>而print2传址，就是传入地址，没有开多大的空 间，因为地址一般为4个字节</strong> </li><li><strong>而print2还可以改变s的各种值</strong></li><li><strong>函数传参的时候，参数是需要压栈的，如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，所以会导致性能的下降。</strong></li><li><strong>因此结构体传参的时候，要传结构体的地址，即传址调用</strong></li></ul><p><strong>压栈</strong><br><img src="https://img-blog.csdnimg.cn/dfcfdc809e8249b688866990f0fa5ca0.png" alt="在这里插入图片描述"></p><h1 id="十五-补充"><a href="#十五-补充" class="headerlink" title="十五. 补充"></a>十五. 补充</h1><h2 id="a）scanf函数"><a href="#a）scanf函数" class="headerlink" title="a）scanf函数"></a>a）scanf函数</h2><ul><li>在VS中，直接使用会报错<br><img src="https://img-blog.csdnimg.cn/6ce95490b60d41d2bb6543b2b25b8eee.png" alt="在这里插入图片描述"></li><li><strong>这个提示要求我们使用scanf_s函数，然而scanf_s函数由VS编译提供，而不是C语言标准规定的</strong></li><li><strong>要想使用scanf函数不报错，就得在源文件的第一行加上：</strong></li><li><code>#define _CRT_SECURE_NO_WARNINGS 1</code></li><li><strong>而为了方便，直接将这个代码放入在创建源文件时就自动生成</strong><br><img src="https://img-blog.csdnimg.cn/1f70d8e125454808a7a6c447c712cd22.png" alt="在这里插入图片描述"></li><li><strong>找到newc++ file.cpp这个文件，将代码放入即可，若必须管理员才能修改，就将其复制出来在外部修改，在粘贴回去替换。修改完后就会发现创建源文件就会自带上这个代码。找不到这个文件可以使用everything软件查找</strong></li><li><strong>注：一般在后面的参数+&amp;，因为对于scanf函数，它将参数视为地址</strong></li></ul><h2 id="b）调试"><a href="#b）调试" class="headerlink" title="b）调试"></a>b）调试</h2><h3 id="1）调试的基本步骤"><a href="#1）调试的基本步骤" class="headerlink" title="1）调试的基本步骤"></a>1）调试的基本步骤</h3><ol><li><strong>发现程序错误的存在</strong> </li><li><strong>以隔离、消除等方式对错误进行定位</strong> </li><li><strong>确定错误产生的原因</strong> </li><li><strong>提出纠正错误的解决办法</strong> </li><li><strong>对程序错误予以改正，重新测试</strong></li></ol><h3 id="2）快捷键"><a href="#2）快捷键" class="headerlink" title="2）快捷键"></a>2）快捷键</h3><h4 id="x1）内存"><a href="#x1）内存" class="headerlink" title="x1）内存"></a>x1）内存</h4><p><img src="https://img-blog.csdnimg.cn/e2fc29a19e73421db81eac222ee394f4.png" alt="在这里插入图片描述"></p><h4 id="x2）调用堆栈"><a href="#x2）调用堆栈" class="headerlink" title="x2）调用堆栈"></a>x2）调用堆栈</h4><p><img src="https://img-blog.csdnimg.cn/c3ede2650ded41a4aa26b2a916e21d19.png" alt="在这里插入图片描述"></p><h4 id="x3）打断点"><a href="#x3）打断点" class="headerlink" title="x3）打断点"></a>x3）打断点</h4><p><img src="https://img-blog.csdnimg.cn/948a816b24484011a41a3dff38d2ca0f.png" alt="在这里插入图片描述"></p><ul><li><strong>设置条件，F5调试直接跳到此步</strong></li></ul><h4 id="x4）常用快捷键"><a href="#x4）常用快捷键" class="headerlink" title="x4）常用快捷键"></a>x4）常用快捷键</h4><p><img src="https://img-blog.csdnimg.cn/f3b3706864c54277914dd3b208996908.png" alt="在这里插入图片描述"></p><h3 id="3）常用的调试技巧"><a href="#3）常用的调试技巧" class="headerlink" title="3）常用的调试技巧"></a>3）常用的调试技巧</h3><h4 id="x1）使用assert"><a href="#x1）使用assert" class="headerlink" title="x1）使用assert"></a>x1）使用assert</h4><ul><li><strong>断言 - 就是判断条件，为假就报错，为真什么事都没有</strong></li><li><strong>就是添加限制条件，触发就报错</strong></li><li><strong>比如说strcpy就不能copy空指针</strong><br><img src="https://img-blog.csdnimg.cn/d82d7cf0843f485fa5a71a32392cd1d5.png" alt="在这里插入图片描述"></li></ul><h4 id="x2）尽量使用const"><a href="#x2）尽量使用const" class="headerlink" title="x2）尽量使用const"></a>x2）尽量使用const</h4><ul><li><strong>const修饰指针变量</strong></li></ul><ol><li><strong>const如果放在*的左边，修饰的是指针指向的内容，保证指针指向的内容不能通过指针来改变。但是指针变量本身的内容可变</strong><br><img src="https://img-blog.csdnimg.cn/93e66737b19b42f08009e03f521dc7f2.png" alt="在这里插入图片描述"></li><li><strong>const如果放在*的右边，修饰的是指针变量本身，保证了指针变量的内容不能修改，但是指针指向的内容，可以通过指针改变</strong><br><img src="https://img-blog.csdnimg.cn/254f06ef36704fca913d15ab2203e8fa.png"></li></ol><h4 id="x3）养成良好的编码风格"><a href="#x3）养成良好的编码风格" class="headerlink" title="x3）养成良好的编码风格"></a>x3）养成良好的编码风格</h4><h4 id="x4）添加必要的注释"><a href="#x4）添加必要的注释" class="headerlink" title="x4）添加必要的注释"></a>x4）添加必要的注释</h4><h4 id="x5）避免编码的陷阱"><a href="#x5）避免编码的陷阱" class="headerlink" title="x5）避免编码的陷阱"></a>x5）避免编码的陷阱</h4><h3 id="4）编译常见的错误"><a href="#4）编译常见的错误" class="headerlink" title="4）编译常见的错误"></a>4）编译常见的错误</h3><h4 id="x1）编译型错误"><a href="#x1）编译型错误" class="headerlink" title="x1）编译型错误"></a>x1）编译型错误</h4><ul><li><strong>直接看错误提示信息（双击），解决问题。或者凭借经验就可以搞定。相对来说简单</strong></li></ul><h4 id="x2）链接型错误"><a href="#x2）链接型错误" class="headerlink" title="x2）链接型错误"></a>x2）链接型错误</h4><ul><li><strong>看错误提示信息，主要在代码中找到错误信息中的标识符，然后定位问题所在。一般是标识符名不存在或者拼写错误</strong></li></ul><h4 id="x3）运行时错误"><a href="#x3）运行时错误" class="headerlink" title="x3）运行时错误"></a>x3）运行时错误</h4><ul><li><strong>借助调试，逐步定位问题。最难搞</strong></li></ul><p><strong>本文是作者直接从CSDN拿过来的</strong><br>————————————————<br>版权声明：本文为CSDN博主「itzzan」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_65508929/article/details/125967924">https://blog.csdn.net/weixin_65508929/article/details/125967924</a></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度剖析数据在内存中的存储-C进阶</title>
      <link href="/post/e4a58e1d.html"/>
      <url>/post/e4a58e1d.html</url>
      
        <content type="html"><![CDATA[<h1 id="深度剖析数据在内存中的存储"><a href="#深度剖析数据在内存中的存储" class="headerlink" title="深度剖析数据在内存中的存储"></a>深度剖析数据在内存中的存储</h1><h2 id="类型的基本归类"><a href="#类型的基本归类" class="headerlink" title="类型的基本归类"></a>类型的基本归类</h2><ol><li><h3 id="整形家族"><a href="#整形家族" class="headerlink" title="整形家族"></a>整形家族</h3></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/78e84b2f6cd84e609f39f5a8d06f8398.png" alt="在这里插入图片描述"></p><h4 id="整型在内存中的存储"><a href="#整型在内存中的存储" class="headerlink" title="整型在内存中的存储"></a>整型在内存中的存储</h4><blockquote><p><strong>整型表示的范围在limits.h头文件中定义</strong></p><h5 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h5></blockquote><p>   <strong>一个整数的二进制表示有三种：原码、反码、补码</strong></p><blockquote><p><strong>正数中：原码、反码、补码相同</strong></p></blockquote><blockquote><p><strong>负数与整数不同</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/83f7a7af396e4fa9b032809eb0de2ee0.png" alt="在这里插入图片描述"></p></blockquote><p><strong>注意</strong></p><ol><li><strong>二进制中的第一位表示符号位，1表示负数，0表示正数</strong></li><li><strong>数据在内存中的存储都是补码，而我们人眼看到的数据都是二进制原码转换成十进制的数</strong></li><li><strong>如果碰到一个正数，则可以直接处理，因为正数的原反补码都相同，而负数要将其转换成补码在进行处理</strong></li></ol><h5 id="大小端介绍"><a href="#大小端介绍" class="headerlink" title="大小端介绍"></a>大小端介绍</h5><p><strong>大端字节序和小端字节序</strong></p><blockquote><p><strong>大端字节序：把数据的低位字节序的内容存放在高地址处，高位字节序的内容放在低地址处</strong></p></blockquote><blockquote><p><strong>小端字节序：把数据的低位字节序的内容存放在低地址处，高位字节序的内容放在低地址处</strong></p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/c5d03fd0d8904812a1827af26127a6c2.png" alt="在这里插入图片描述"></p><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/c62220d1abd6498eb9ffd9fd3c8191e2.png" alt="在这里插入图片描述"></p></blockquote><ul><li><strong>a为十六进制 11 22 33 44, 而定义十六进制前面的11为高位字节序,后面的44为低位字节序</strong></li></ul><hr><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p> - </p><ul><li><strong>char类型到底是signed char还是unsigned char, C语言标准并没有规定，取决于编译器</strong></li><li><strong>int类型是signed int, short类型是signed short, C语言规定</strong></li><li><font color="red">有符号的char类型(signed char)的取值范围: -128~127. 另外-128是计算不出来的,但是编译器看到10000000二进制序列会直接编译成-128</li><li><font color='red'>无符号的char类型(unsigned char)的取值范围:0~255</li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/6c6c25089c1b42c998f5055b9433c286.png" alt="在这里插入图片描述"></li></ul><hr><h3 id="浮点数家族"><a href="#浮点数家族" class="headerlink" title="浮点数家族"></a>浮点数家族</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/5db4c6bf0c0741a8957cdeca64ea6cc6.png" alt="在这里插入图片描述"></p><h4 id="浮点数在内存中的存储"><a href="#浮点数在内存中的存储" class="headerlink" title="浮点数在内存中的存储"></a>浮点数在内存中的存储</h4><blockquote><p><strong>浮点数表示的范围在float.h头文件中定义</strong></p></blockquote><h5 id="浮点数存储规则"><a href="#浮点数存储规则" class="headerlink" title="浮点数存储规则"></a>浮点数存储规则</h5><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/4fb8809374654ce09ae13e53f4839db6.png" alt="在这里插入图片描述"></p></blockquote><ol><li><strong>(-1)^S * M * 2^E</strong></li><li><strong>(-1)^s表示符号位，当s&#x3D;0，V为正数；当s&#x3D;1，V为负数</strong></li><li><strong>M表示有效数字，大于等于1，小于2</strong></li><li><strong>2^E表示指数位</strong></li></ol><hr><blockquote><p><strong>例如:十进制5.5</strong><br><strong>1.   先转换成二进制为101.1——-小数点后面是负数次，也就是1*2^-1次</strong><br><strong>2.  101.1 –&gt; 1.011*2^2（因为是2进制，而且移动2位，所以乘2乘2次方）</strong><br><strong>3. s&#x3D;0；M&#x3D;1.011；E&#x3D;2———-正数(所以s&#x3D;0),M为有效数字,E为指数</strong></p></blockquote><hr><h5 id="浮点数另外的存储规则-对有效数字M和指数E的规定"><a href="#浮点数另外的存储规则-对有效数字M和指数E的规定" class="headerlink" title="浮点数另外的存储规则(对有效数字M和指数E的规定)"></a>浮点数另外的存储规则(对有效数字M和指数E的规定)</h5><h6 id="有效数字M"><a href="#有效数字M" class="headerlink" title="有效数字M"></a>有效数字M</h6><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/cb09a3070d1342c89cee0e0c757bead1.png" alt="在这里插入图片描述"><br><font color='red'><strong>即:将有效数字M前面的1省略,最后在补上</strong></p></blockquote><h6 id="指数E"><a href="#指数E" class="headerlink" title="指数E"></a>指数E</h6><blockquote><ol><li><strong>E不全为0或不全为1（重点)</strong></li><li><strong>E全为0</strong></li><li><strong>E全为1</strong></li></ol></blockquote><hr><p><strong>E不全为0或不全为1</strong></p><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/46e586460b49480ba9d8b9c017230587.png" alt="在这里插入图片描述"><br><font color='red'>即:将E+127（float类型）或者+1023（double类型）,再转换成二进制<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/9292c03273a64f2b8ab050811bef90ba.png" alt="在这里插入图片描述"></p></blockquote><hr><p><strong>E全为0</strong></p><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/04f8d7d0bdf143088fd45fd8a603c768.png" alt="在这里插入图片描述"><br><font color='red'><strong>即:这个浮点数近似为0,可以不用计算,因为全0,-127后就是-127的二进制,即E为-126次,因此近似为0</strong></p></blockquote><hr><p><strong>E全为1</strong></p><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/f9e6382d12f94f6bb578b93e95f3a550.png" alt="在这里插入图片描述"><br><font color='red'><strong>即:这个浮点数为无穷大,因为E为很大的数,因此无穷大</strong></p></blockquote><hr><h5 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h5><blockquote><p><strong>float类型</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/0c1ef74484c4492b91f258248e6e8a71.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p><strong>double类型</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/e26a0bdfc16c4424b0270fd5e8804a5d.png" alt="在这里插入图片描述"></p></blockquote><h3 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h3><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/fb7a4045139f4b3aa95245c03d9ccd40.png" alt="在这里插入图片描述"></p></blockquote><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/5fee12d54b7f418cbbd9ab03f28be57c.png" alt="在这里插入图片描述"></p><h3 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h3><blockquote><p><strong>void 表示空类型（无类型）</strong><br><strong>通常应用于函数的返回类型、函数的参数、指针类型</strong></p><ol><li><strong>函数的返回类型 void test()</strong></li><li><strong>函数参数 void test(void)</strong></li><li><font color='black'>指针 void* p</li></ol></blockquote><p><strong>本文是作者直接从CSDN拿过来的</strong><br>原址版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>CSDN链接：<a href="https://blog.csdn.net/weixin_65508929/article/details/126217246">https://blog.csdn.net/weixin_65508929/article/details/126217246</a></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针就该这么学-C指针进阶</title>
      <link href="/post/ae18156d.html"/>
      <url>/post/ae18156d.html</url>
      
        <content type="html"><![CDATA[<p>本期介绍：<br><font color="red"><strong>本期主要讲解C语言指针如何轻松拿下，以各种面试真题来讲解C语言指针就该这么学</strong>👀</p><h1 id="🏡字符指针"><a href="#🏡字符指针" class="headerlink" title="🏡字符指针"></a>🏡字符指针</h1><h2 id="🗝️基本介绍"><a href="#🗝️基本介绍" class="headerlink" title="🗝️基本介绍"></a>🗝️基本介绍</h2><ul><li>字符指针用<strong>char</strong>*来定义</li></ul><p>一般使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> *pc = &amp;ch;</span><br><span class="line">    *pc = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将<strong>ch的地址</strong>传到<strong>pc</strong>中，*pc（解引用pc）就为’w’（字符w），将其改变为’s’（字符s）</li></ul><h2 id="🗝️面试题"><a href="#🗝️面试题" class="headerlink" title="🗝️面试题"></a>🗝️面试题</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str3 = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str4 = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(str1 ==str2)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are same\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are not same\n&quot;</span>);</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">if</span>(str3 ==str4)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are same\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are not same\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：<br><img src="https://img-blog.csdnimg.cn/a93d3a7f589944e0a0e5d021e15c521d.png#pic_center" alt="在这里插入图片描述"><br><strong>解释：</strong></p><blockquote><p>因为str1和str2都是数组，<strong>都开辟了一块空间来存储数组</strong>，并且表示的都是首元素的地址 </p></blockquote><blockquote><p>str3和str4两个都是<strong>字符指针</strong>，定义的是<strong>同一个字符串的首元素地址</strong>，所以相等。并且是常量字符串。而且<strong>常量字符串是不能改变的</strong>，且只有一份</p></blockquote><blockquote><p>指针指向<strong>同一个字符串</strong>的时候，实际会指向<strong>同一块内存</strong><br>而用<strong>相同的常量字符串</strong>去初始化<strong>不同的数组</strong>的时候就会开辟出<strong>不同的内存块</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/d7d6f604ee1e40bd854c59548a53ad74.png" alt="在这里插入图片描述"></p><h1 id="🏡数组指针"><a href="#🏡数组指针" class="headerlink" title="🏡数组指针"></a>🏡数组指针</h1><h2 id="🗝️基本介绍-1"><a href="#🗝️基本介绍-1" class="headerlink" title="🗝️基本介绍"></a>🗝️基本介绍</h2><ul><li>一种<strong>指向数组</strong>的<strong>指针</strong>（<strong>本质是指针</strong>）</li></ul><p> 辨别数组指针和指针数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span> (*p2)[<span class="number">10</span>];</span><br><span class="line">P1和p2又表示什么呢？</span><br></pre></td></tr></table></figure><blockquote><p>由于[]的优先级要高于*号的，因此p1先和[10]结合，返回类型为int**类型，所以p1是一个指针数组</p></blockquote><blockquote><p><strong>p2先和*结合</strong>，说明p2是一个<strong>指针变量</strong>，然后<strong>指向的是一个大小为10个整型的数组</strong>。所以p2是一个指针，指向一个数组，叫数组指针</p></blockquote><h2 id="🗝️-amp-数组名和数组名"><a href="#🗝️-amp-数组名和数组名" class="headerlink" title="🗝️&amp;数组名和数组名"></a>🗝️&amp;数组名和数组名</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/4d8e71e4657546249494c341556317d3.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p><font color="red"><strong>&amp;数组名和数组名都表示首元素的地址，但是两者的本质不同</strong></p></blockquote><blockquote><p><strong>&amp;arr表示整个数组的首地址，即首元素地址<br>arr表示数组首元素的地址</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;arr = %p\n&quot;</span>, arr);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr= %p\n&quot;</span>, &amp;arr);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;arr+1 = %p\n&quot;</span>, arr+<span class="number">1</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr+1= %p\n&quot;</span>, &amp;arr+<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/8d45a528bacd4b82b6bfd4fdc7802ec0.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p><font color="blue">因为arr表示数组首元素的地址，因此arr+1就表示数组第二个元素的地址</p></blockquote><blockquote><p><font color="blue">而&amp;arr表示的是整个数组的地址，也是首元素的地址，因此&amp;arr+1表示跳出整个数组的首元素地址</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2d1f2364477c454bb998f26a7c698950.png#pic_center" alt="在这里插入图片描述"></p><h2 id="🗝️数组指针的使用"><a href="#🗝️数组指针的使用" class="headerlink" title="🗝️数组指针的使用"></a>🗝️数组指针的使用</h2><ul><li>数组指针<strong>指向的是数组</strong>，那数组指针中存放的应该是<strong>数组的地址</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span> (*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//把数组arr的地址赋值给数组指针变量p</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是我们很少这样子使用，一般对数组指针的使用都在<strong>传参</strong>之中</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr1</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>], <span class="type">int</span> row, <span class="type">int</span> col)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">       &#125;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr2</span><span class="params">(<span class="type">int</span> (*arr)[<span class="number">5</span>], <span class="type">int</span> row, <span class="type">int</span> col)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">print_arr1</span>(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">print_arr2</span>(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组名arr，表示<strong>首元素的地址</strong>，但是<strong>二维数组的首元素是二维数组的第一行</strong>，所以这里传递的arr，其实相当于<strong>第一行的地址</strong>，是<strong>一维数组的地址</strong>，可以数组指针来接收。</p></blockquote><h2 id="🗝️题目"><a href="#🗝️题目" class="headerlink" title="🗝️题目"></a>🗝️题目</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以下代码的含义是什么？</span><br><span class="line"><span class="number">1.</span> <span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="number">2.</span> <span class="type">int</span> *parr1[<span class="number">10</span>];</span><br><span class="line"><span class="number">3.</span> <span class="built_in">int</span> (*parr2)[<span class="number">10</span>];</span><br><span class="line"><span class="number">4.</span> <span class="built_in">int</span> (*parr3[<span class="number">10</span>])[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><blockquote><p><font color="brown">1. 整型数组<br>2. 整型指针的数组<br>3. 数组指针，该指针能够指向一个数组，数组10个元素，每个元素的类型是int类型<br>4. parr3是一个存储数组指针的数组，该数组能 够存放10个数值指针，每个数组指针能够指向一个数组，数组5个元素，每个元素是int类型</p></blockquote><h1 id="🏡数组参数、指针参数"><a href="#🏡数组参数、指针参数" class="headerlink" title="🏡数组参数、指针参数"></a>🏡数组参数、指针参数</h1><h2 id="🗝️一维数组传参"><a href="#🗝️一维数组传参" class="headerlink" title="🗝️一维数组传参"></a>🗝️一维数组传参</h2><h3 id="💨题目"><a href="#💨题目" class="headerlink" title="💨题目"></a>💨题目</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">1.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[])</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">2.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>])</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">3.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> *arr)</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">4.</span> <span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">(<span class="type">int</span> *arr[<span class="number">20</span>])</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">5.</span> <span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">(<span class="type">int</span> **arr)</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="type">int</span> *arr2[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="built_in">test</span>(arr);</span><br><span class="line"> <span class="built_in">test2</span>(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的5个全部ok，全都是正确的（易）</p><ol><li>arr是一个有10个元素的数组，10个元素都是int类型的，当传参传入(1)的时候，传过去的是首元素的地址，而int arr[]就是接受了这个数组的地址，这[]里面的数字可以不写</li><li>跟(1)差不多，只不过加了[]里面的数字，就是限制了元素个数</li><li>*arr说明是一个指针，而指针就是地址，所以是对的</li><li>arr2是一个由20个元素的数组，20个元素都是int＊类型，当传参传入(4)的时候，传过去的也是首元素的地址，而arr[20]就接受了这个地址，且类型是int＊类型</li><li>＊arr说明是一个指针，指针就是地址，且类型是int＊类型</li></ol></blockquote><h2 id="🗝️二维数组传参"><a href="#🗝️二维数组传参" class="headerlink" title="🗝️二维数组传参"></a>🗝️二维数组传参</h2><h3 id="💨题目-1"><a href="#💨题目-1" class="headerlink" title="💨题目"></a>💨题目</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">2.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[][])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">3.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[][<span class="number">5</span>])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">4.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> *arr)</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">5.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span>* arr[<span class="number">5</span>])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">6.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> (*arr)[<span class="number">5</span>])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">7.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> **arr)</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="built_in">test</span>(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正确ok（1 3 6），错误no（2 4 5 7）</p><ol><li>简单（不讲解）</li><li>二维数组传参，参数可以写成数组，但列不能省略</li><li>行可以不知道，但列要知道</li><li>arr传过去的是第一行的地址，而且是有5个元素的一维数组，而*arr只表示的是第一行的地址。二维数组传参，传过来的是数组首地址 —— 一维数组，不能匹配</li><li>arr[5]接收到的是第一行的地址，放不了，这里是存放指针的数组不能匹配</li><li>*arr表示第一行的地址，加了[5]就是有5个元素的一维数组，即传过来的地址</li><li>**arr其实表示的是首元素的地址，即第一行的首元素的地址，二级指针不能匹配一维数组的地址</li></ol></blockquote><blockquote><p>总结：二维数组传参，函数形参的设计只能省略第一个[]的数字，因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素，这样才方便运算。</p></blockquote><h2 id="🗝️一维指针传参"><a href="#🗝️一维指针传参" class="headerlink" title="🗝️一维指针传参"></a>🗝️一维指针传参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> sz)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sz; i++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(p+i));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = arr;</span><br><span class="line"> <span class="type">int</span> sz = <span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"> <span class="comment">//一级指针p，传给函数</span></span><br><span class="line"> <span class="built_in">print</span>(p, sz);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🗝️二维指针传参"><a href="#🗝️二维指针传参" class="headerlink" title="🗝️二维指针传参"></a>🗝️二维指针传参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span>** ptr)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, **ptr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"> <span class="type">int</span>*p = &amp;n;</span><br><span class="line"> <span class="type">int</span> **pp = &amp;p;</span><br><span class="line"> <span class="built_in">test</span>(pp);</span><br><span class="line"> <span class="built_in">test</span>(&amp;p);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="🏡函数指针"><a href="#🏡函数指针" class="headerlink" title="🏡函数指针"></a>🏡函数指针</h1><h2 id="🗝️基本介绍-2"><a href="#🗝️基本介绍-2" class="headerlink" title="🗝️基本介绍"></a>🗝️基本介绍</h2><ul><li><strong>指向函数的指针，存放函数地址的指针</strong></li></ul><p>首先来看一串代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, test);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;test);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p><img src="https://img-blog.csdnimg.cn/24134cc071a14a0990efd6c10b04a5ed.png#pic_center" alt="在这里插入图片描述"></p></blockquote><ul><li><font color="red">这里我们发现函数名和&amp;函数名取出来的地址相同<blockquote><p>那我们可以得出结论：**&amp;函数名 &#x3D;&#x3D;  函数名<strong>，同时我们要知道</strong>数组名  !&#x3D;  &amp;数组名**<br>因此在<strong>调用函数名的地址</strong>，可以<strong>省略&amp;符号</strong></p></blockquote></li></ul><h2 id="🗝️有趣的代码（来自《C陷阱和缺陷》）"><a href="#🗝️有趣的代码（来自《C陷阱和缺陷》）" class="headerlink" title="🗝️有趣的代码（来自《C陷阱和缺陷》）"></a>🗝️有趣的代码（来自《C陷阱和缺陷》）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*(<span class="built_in">void</span> (*)())<span class="number">0</span>)();</span><br></pre></td></tr></table></figure><blockquote><p>首先观察代码，我们可以发现里面能突破的只有<strong>常数0</strong>，如果它代表常数0，那<strong>前面的(类型)就是强转类型</strong>，发现强转为<strong>函数指针类型</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span>(*)()</span><br><span class="line"><span class="built_in">void</span>(*)()<span class="number">0</span></span><br><span class="line">将强转类型拿下后：</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/85a83ce556044b8c95e2eacf6269a4de.png#pic_center" alt="在这里插入图片描述"></p><ul><li>发现就是<strong>调用函数</strong><blockquote><p><strong>调用0地址处的函数，该函数无参，返回类型是void</strong><br><font color="blue">**1. void(＊)() - 函数指针类型 </p><ol start="2"><li>(void(＊)())0 - 对0进行强制类型转换 - 被解释为一个函数的地址 </li><li>＊(void(＊)())0 - 对0地址进行解引用操作</li><li>(＊(void(＊)())0)() - 调用0地址处的函数**</li></ol></blockquote></li></ul><p>代码二：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (*<span class="built_in">signal</span>(<span class="type">int</span> , <span class="built_in">void</span>(*)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br></pre></td></tr></table></figure><blockquote><ol><li>signal 和()先结合，说明signal是函数名 </li><li>signal函数的第一个参数的类型是int类型，第二个参数的类型是函数指针类型该函数指针，指向一个参数为int，返回类型是void的函数 </li><li>signal函数的返回类型也是一个函数指针，该函数指针指向一个参数为int，返回类型为void的函数 signal是一个函数的声明<br><img src="https://img-blog.csdnimg.cn/03c56dff9ff04be0930e440d80c68a78.png#pic_center" alt="在这里插入图片描述"></li></ol></blockquote><h1 id="🏡函数指针数组"><a href="#🏡函数指针数组" class="headerlink" title="🏡函数指针数组"></a>🏡函数指针数组</h1><h2 id="🗝️基本认识和使用"><a href="#🗝️基本认识和使用" class="headerlink" title="🗝️基本认识和使用"></a>🗝️基本认识和使用</h2><ul><li><strong>存放函数指针的数组，并且只能存放同类型的函数指针</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">int</span>(*pf1)(<span class="type">int</span>, <span class="type">int</span>) = Add;</span><br><span class="line"><span class="built_in">int</span>(*pf2)(<span class="type">int</span>, <span class="type">int</span>) = Sub;</span><br><span class="line"><span class="built_in">int</span>(*pfArr[<span class="number">2</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123;Add, Sub&#125;;</span><br><span class="line"><span class="comment">//pfArr - 函数指针数组 - 存放同类型的函数指针</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="🏡指向函数指针数组的指针"><a href="#🏡指向函数指针数组的指针" class="headerlink" title="🏡指向函数指针数组的指针"></a>🏡指向函数指针数组的指针</h1><h2 id="🗝️基本介绍和使用"><a href="#🗝️基本介绍和使用" class="headerlink" title="🗝️基本介绍和使用"></a>🗝️基本介绍和使用</h2><ul><li><strong>是一个指针，指针指向一个数组，数组的元素都是函数指针</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//函数指针pfun</span></span><br><span class="line"> <span class="built_in">void</span> (*pfun)(<span class="type">const</span> <span class="type">char</span>*) = test;</span><br><span class="line"> <span class="comment">//函数指针的数组pfunArr</span></span><br><span class="line"> <span class="built_in">void</span> (*pfunArr[<span class="number">5</span>])(<span class="type">const</span> <span class="type">char</span>* str);</span><br><span class="line"> pfunArr[<span class="number">0</span>] = test;</span><br><span class="line"> <span class="comment">//指向函数指针数组pfunArr的指针ppfunArr</span></span><br><span class="line"> <span class="built_in">void</span> (*(*ppfunArr)[<span class="number">5</span>])(<span class="type">const</span> <span class="type">char</span>*) = &amp;pfunArr;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(*p)(<span class="type">int</span>, <span class="type">int</span>);<span class="comment">//函数指针</span></span><br><span class="line"><span class="built_in">int</span>(*p2[<span class="number">4</span>])(<span class="type">int</span>, <span class="type">int</span>);<span class="comment">//函数指针的数组</span></span><br><span class="line"><span class="built_in">int</span>(*(*p3)[<span class="number">4</span>])(<span class="type">int</span>, <span class="type">int</span>) = &amp;p2;<span class="comment">//取出的是函数指针数组的地址</span></span><br><span class="line"><span class="comment">//p3就是一个指向函数指针数组的指针</span></span><br></pre></td></tr></table></figure><h1 id="🏡回调函数"><a href="#🏡回调函数" class="headerlink" title="🏡回调函数"></a>🏡回调函数</h1><h2 id="🗝️基本介绍-3"><a href="#🗝️基本介绍-3" class="headerlink" title="🗝️基本介绍"></a>🗝️基本介绍</h2><ul><li>回调函数就是一个<strong>通过函数指针调用的函数</strong>，将<strong>函数的指针</strong>(地址)作为<strong>参数传递</strong>给<strong>另一个函数</strong>，当整个指针被用来调用其所指向的函数时，这就是回调函数</li></ul><blockquote><p>可以这么理解：有一个A函数，这里不是直接去调用A函数，而是先将A函数的地址传给B函数(这里的B函数的参数就是一个函数指针)，然后通过B函数去调用A函数时，这样子就被称为回调函数<br><img src="https://img-blog.csdnimg.cn/0091f7dbff0d42de973ccb2cdecb9219.png#pic_center" alt="在这里插入图片描述"></p></blockquote><h2 id="🗝️qsort函数"><a href="#🗝️qsort函数" class="headerlink" title="🗝️qsort函数"></a>🗝️qsort函数</h2><ul><li><strong>qsort函数就是快速排序，什么类型都能排（整型数据、字符串 数据、结构体数据）</strong></li></ul><p><strong>对于这种不熟悉的函数，不知道如何使用的话可以上<a href="https://cplusplus.com/reference/">查找</a>即<a href="https://cplusplus.com/reference/">https://cplusplus.com/reference/</a><br>在上面可以查看到qsort的使用方法</strong><br><img src="https://img-blog.csdnimg.cn/4495dd18e5974b9ba61844bc44599132.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">(<span class="type">void</span>* base, <span class="comment">//base里面放的是待排序的第一个元素(对象)的地址.void* 无类型的指针，什么都可以放进去</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">size_t</span> num, <span class="comment">//排序数据元素的个数</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">size_t</span> size,<span class="comment">//数据中一个元素的大小，单位是字节</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span></span>;<span class="comment">//是用来比较待排序数据中的2个元素的函数</span></span><br></pre></td></tr></table></figure><h3 id="💨qsort实现整型数据的排序"><a href="#💨qsort实现整型数据的排序" class="headerlink" title="💨qsort实现整型数据的排序"></a>💨qsort实现整型数据的排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//整型数据的排序</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="built_in">qsort</span>(arr, sz, <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line"><span class="built_in">print_arr</span>(arr, sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test1</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="💨qsort实现对结构体数据的排序"><a href="#💨qsort实现对结构体数据的排序" class="headerlink" title="💨qsort实现对结构体数据的排序"></a>💨qsort实现对结构体数据的排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Stu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort_by_age</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">struct</span> Stu*)e1)-&gt;age - ((<span class="keyword">struct</span> Stu*)e2)-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort_by_name</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(((<span class="keyword">struct</span> Stu*)e1)-&gt;name, ((<span class="keyword">struct</span> Stu*)e2)-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//使用qsort函数排序结构体数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stu</span> s[] = &#123; &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>&#125;, &#123;<span class="string">&quot;lisi&quot;</span>, <span class="number">34</span>&#125;, &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="comment">//按照年龄来排序</span></span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(s) / <span class="built_in">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//qsort(s, sz, sizeof(s[0]), sort_by_age);</span></span><br><span class="line"><span class="comment">//按照名字比较</span></span><br><span class="line"><span class="built_in">qsort</span>(s, sz, <span class="built_in">sizeof</span>(s[<span class="number">0</span>]), sort_by_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test2</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="💨模拟实现qsort函数，实现一个冒泡排序的通用算法"><a href="#💨模拟实现qsort函数，实现一个冒泡排序的通用算法" class="headerlink" title="💨模拟实现qsort函数，实现一个冒泡排序的通用算法"></a>💨模拟实现qsort函数，实现一个冒泡排序的通用算法</h3><ul><li>首先先来了解下冒泡排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设写一个冒泡排序函数，让你排序字符串</span></span><br><span class="line"><span class="comment">//bubble_sort_str();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">升序</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">冒泡排序的趟数</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一趟冒泡排序</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - i <span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">交换</span><br><span class="line"><span class="type">int</span> tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">print_arr</span>(arr, sz);</span><br><span class="line"><span class="built_in">bubble_sort</span>(arr, sz);</span><br><span class="line"><span class="built_in">print_arr</span>(arr, sz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>冒泡排序就是两两比较，我这里是升序，所以小的在前，每次都相邻比较，每次都将最小的放在最后</strong><img src="https://img-blog.csdnimg.cn/51a92a9b46bc47b19ab4cbd98d827f6b.png" alt="在这里插入图片描述"></p></blockquote><ul><li><strong>✨模拟实现qsort函数</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模仿qsort函数，实现一个冒泡排序的通用算法（可以排各种数据）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">char</span>* buf1, <span class="type">char</span>* buf2, <span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; width; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> tmp = *buf1;</span><br><span class="line">*buf1 = *buf2;</span><br><span class="line">*buf2 = tmp;</span><br><span class="line">buf1++;</span><br><span class="line">buf2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">void</span>* base, <span class="type">int</span> sz, <span class="type">int</span> width, <span class="type">int</span>(*cmp)(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//趟数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一趟的排序</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//两个元素的比较</span></span><br><span class="line"><span class="comment">//char*是加几就跳过几个字节</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cmp</span>((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="built_in">Swap</span>((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width, width);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort_by_age</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">struct</span> Stu*)e1)-&gt;age - ((<span class="keyword">struct</span> Stu*)e2)-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">bubble_sort</span>(arr, sz, <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line"><span class="built_in">print_arr</span>(arr, sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stu</span> s[<span class="number">3</span>] = &#123; &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>&#125;, &#123;<span class="string">&quot;lisi&quot;</span>, <span class="number">34</span>&#125;, &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(s) / <span class="built_in">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">bubble_sort</span>(s, sz, <span class="built_in">sizeof</span>(s[<span class="number">0</span>]), sort_by_age);</span><br><span class="line"><span class="comment">//bubble_sort(s, sz, sizeof(s[0]), sort_by_name);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test3</span>();</span><br><span class="line"><span class="built_in">test4</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="✨指针和数组笔试题解析（重点）"><a href="#✨指针和数组笔试题解析（重点）" class="headerlink" title="✨指针和数组笔试题解析（重点）"></a>✨指针和数组笔试题解析（重点）</h1><blockquote><p><font color="red"><strong>数组名的意义：</strong> </p><ol><li><strong>sizeof(数组名)<strong>，这里要数组名</strong>单独存放</strong>在sizeof内部，这里的数组名才表示<strong>整个数组</strong>，不然表示的是首元素的地址，这里计算的是整个数组的大小</li><li><strong>&amp;数组名</strong>，这里的数组名表示<strong>整个数组</strong>，取出的是整个数组的地址 </li><li><strong>除此之外</strong>所有的数组名都表示首元素的地址</li><li>sizeof里面计算的，<strong>只要是地址</strong>，那么<strong>计算出来就是4或8</strong>，和<strong>电脑的位数</strong>有关</li></ol></blockquote><h2 id="🗝️数组笔试题"><a href="#🗝️数组笔试题" class="headerlink" title="🗝️数组笔试题"></a>🗝️数组笔试题</h2><h3 id="💨题一"><a href="#💨题一" class="headerlink" title="💨题一"></a>💨题一</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一维数组</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a));<span class="comment">//16=4*4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a + <span class="number">0</span>));<span class="comment">//4或8，a+0是第一个地址，因为a+0了，a并不是单独放在sizeof内部，那么a就表示首元素的地址，+0那么还是首元素的地址，那就是4或8，看电脑位数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*a));<span class="comment">//4， a也是表示首元素的地址，解引用后就是1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a + <span class="number">1</span>));<span class="comment">//4或8，a+1就是第二个元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">1</span>]));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;a));<span class="comment">//4或8，&amp;a虽然是整个数组的地址，但是也是地址，因此sizeof计算的就是一个地址的大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*&amp;a));<span class="comment">//16，&amp;a是整个数组的地址，解引用后找到的就是整个数组，那么就是16</span></span><br><span class="line">&amp;a -- <span class="built_in">int</span>(*p)[<span class="number">4</span>] -- &amp;<span class="function">a</span></span><br><span class="line"><span class="function"><span class="title">printf</span><span class="params">(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a + <span class="number">1</span>))</span></span>;<span class="comment">//4或8，&amp;a表示整个数组的地址，+1跳过一个数组，下一块空间的地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;a[<span class="number">0</span>]));<span class="comment">//4或8，第一个元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;a[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，第二个元素的地址</span></span><br></pre></td></tr></table></figure><h3 id="💨题二"><a href="#💨题二" class="headerlink" title="💨题二"></a>💨题二</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字符数组</span><br><span class="line"><span class="type">char</span> arr[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr));<span class="comment">//随机值，arr首元素地址，往后数，但没有\0，因此随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr + <span class="number">0</span>));<span class="comment">//随机值，arr首元素地址，+0还是首元素地址，因此随机</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*arr));<span class="comment">//错误error，首元素的地址，解引用就是字符a，传过去就是97，不是个合法的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr[<span class="number">1</span>]));<span class="comment">//错误error，b为98，同上</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr));<span class="comment">//随机值，整个数组的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr + <span class="number">1</span>));<span class="comment">//随机值，跳过一个数组的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//随机值，b的地址</span></span><br></pre></td></tr></table></figure><blockquote><p>error的情况：在模拟strlen函数的时候，我们可以知道 int my_strlen(const char* str)它的参数是一个指针，应该接收地址，而这里传的是一个字符，因此error。<br>调试可以发现错误<br><img src="https://img-blog.csdnimg.cn/834ba30e82a84dd6b04858d23b1333fe.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题三"><a href="#💨题三" class="headerlink" title="💨题三"></a>💨题三</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> arr[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr));<span class="comment">//6，</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr + <span class="number">0</span>));<span class="comment">//4或8，arr表示首元素地址，+0还是首元素地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*arr));<span class="comment">//1，因arr是首元素的地址，*arr解引用就是a，</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr[<span class="number">1</span>]));<span class="comment">//1，arr[1]就是b</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr));<span class="comment">//4或8，取出这个地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr + <span class="number">1</span>));<span class="comment">//4或8，&amp;arr是整个数组的地址，+1跳到了f后面的地址，但还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，&amp;arr[0]就是a的地址，+1就是b的地址，还是地址</span></span><br></pre></td></tr></table></figure><h3 id="💨题四"><a href="#💨题四" class="headerlink" title="💨题四"></a>💨题四</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">[a,b,c,d,e,f,\<span class="number">0</span>]</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr));<span class="comment">//6，首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr + <span class="number">0</span>));<span class="comment">//6，首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*arr));<span class="comment">//error，将a传过去了，97作为地址有问题</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr[<span class="number">1</span>]));<span class="comment">//error，同上，只不过传的是98的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr));<span class="comment">//6，起始元素的地址，还是从首元素开始</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr + <span class="number">1</span>));<span class="comment">//随机值，跳出整个数组的地址，\0也跳过去了，所以就是随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//5，b的地址，从b开始数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr));<span class="comment">//7，总大小，算\0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr + <span class="number">0</span>));<span class="comment">//4或8，首元素地址+0还是首元素地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*arr));<span class="comment">//1，解引用就是字符a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr[<span class="number">1</span>]));<span class="comment">//1，解引用就是字符b</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr));<span class="comment">//4或8，整个数组的地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr + <span class="number">1</span>));<span class="comment">//4或8，跳过整个数组的地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，b的地址，还是地址</span></span><br></pre></td></tr></table></figure><h3 id="💨题五"><a href="#💨题五" class="headerlink" title="💨题五"></a>💨题五</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">a b c d e f \<span class="number">0</span>，p存的是a的地址</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p));<span class="comment">//6</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p + <span class="number">1</span>));<span class="comment">//5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*p));<span class="comment">//error，*p找到的是a，传进去是97，会出错</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p[<span class="number">0</span>]));<span class="comment">//error，同上理</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p));<span class="comment">//随机值，找的是p的首地址，p里面存的只是a的地址，因此没有\0，所以随机</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p + <span class="number">1</span>));<span class="comment">//随机值，同上理</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(p));<span class="comment">//4或8，p是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(p + <span class="number">1</span>));<span class="comment">//4或8，p+1就是b的地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*p));<span class="comment">//1，拿出来a，大小就是1个字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(p[<span class="number">0</span>]));<span class="comment">//1，将字符串当作数组来访问，p[0] = *(p+0)，所以还是找到a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;p));<span class="comment">//4或8，取得还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;p + <span class="number">1</span>));<span class="comment">//4或8，取的是跳出整个p的地址，但还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;p[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，取出的是第二个元素b的地址</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>&amp;p就是取指针变量p的地址</strong><br>&amp;p就是取指针变量p的<strong>首地址</strong>，而p里面存的<strong>只有a的地址</strong>，没有\0，所以<strong>随机值</strong></p></blockquote><h3 id="💨题六"><a href="#💨题六" class="headerlink" title="💨题六"></a>💨题六</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">二维数组</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a));<span class="comment">//3*4*4 = 48....3*4*sizeof(int)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//4，第一行第一个元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>]));<span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，解释：a[0]作为数组名，并没有单独放在sizeof内部，</span></span><br><span class="line"> <span class="comment">//也没有取地址&amp;，而是与1结合，</span></span><br><span class="line"> <span class="comment">//所以a[0]就代表第一行第一个的地址，+1就是第二个元素的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*(a[<span class="number">0</span>] + <span class="number">1</span>)));<span class="comment">//4，解释：对(a[0]+1)第一行第二个元素的地址解引用就是第二个元素，是int类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a + <span class="number">1</span>));<span class="comment">//4或8，解释：a并没有单独放在sizeof内部，因此就作为二维数组首元素的地址，</span></span><br><span class="line">  <span class="comment">//二维数组首元素就是第一行,+1就是第二行的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*(a + <span class="number">1</span>)));<span class="comment">//16，解释：a+1是第二行的地址，所以解引用是第二行，*(a+1)&lt;--&gt;a[1]</span></span><br><span class="line">     <span class="comment">//所以计算的就是第二行的大小</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;a[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，解释：a[0]是第一行的数组名，取地址&amp;a[0]，取出的就是第一行的地址</span></span><br><span class="line">  <span class="comment">//+1就是第二行的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*(&amp;a[<span class="number">0</span>] + <span class="number">1</span>)));<span class="comment">//16，解引用拿到的就是第二行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*a));<span class="comment">//16，a没有单独放在sizeof中，所以a表示首元素的地址，即第一行的地址，解引用就是第一行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">3</span>]));<span class="comment">//16，a[3]在数组里不存在，a[3]其实是第四行数组名（如果有的话）</span></span><br><span class="line"> <span class="comment">//所以其实不存在，也能通过类型计算大小的</span></span><br></pre></td></tr></table></figure><blockquote><p><font color="red">注意：<br><strong>1. sizeof内部的表达式时不计算的！</strong><br><strong>2. sizeof不会导致越界</strong><br><img src="https://img-blog.csdnimg.cn/16d662ae7efc40a18e97d84fa24ccebe.png#pic_center" alt="在这里插入图片描述"></p></blockquote><hr><blockquote><p>补充：sizeof的用法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">short</span> s = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(s = a + <span class="number">6</span>));<span class="comment">//2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);<span class="comment">//5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于sizeof<strong>内部不进行计算</strong>，因此只<strong>看最后输出为什么类型</strong>即可，最后输出为short类型，即2字节大小<br>因为sizeof<strong>内部不进行计算</strong>，所以<strong>s没有变化</strong>，所以s还是为5，打印即为5</p></blockquote><h2 id="🗝️指针笔试题"><a href="#🗝️指针笔试题" class="headerlink" title="🗝️指针笔试题"></a>🗝️指针笔试题</h2><h3 id="💨题一-1"><a href="#💨题一-1" class="headerlink" title="💨题一"></a>💨题一</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(a + <span class="number">1</span>), *(ptr - <span class="number">1</span>));<span class="comment">//2 5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/848bf3c2f8e14c5d8992567de465f118.png#pic_center" alt="在这里插入图片描述"><br><strong>&amp;a表示整个数组的首地址，因此+1就是跳过整个数组<br>而a只表示数组的首元素地址，+1就是表示第二个元素的地址</strong></p></blockquote><h3 id="💨题二-1"><a href="#💨题二-1" class="headerlink" title="💨题二"></a>💨题二</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">由于还没学习结构体，这里告知结构体的大小是<span class="number">20</span>个字节</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Num;</span><br><span class="line"><span class="type">char</span>* pcName;</span><br><span class="line"><span class="type">short</span> sDate;</span><br><span class="line"><span class="type">char</span> cha[<span class="number">2</span>];</span><br><span class="line"><span class="type">short</span> sBa[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line">*p假设p 的值为<span class="number">0x100000</span>。 如下表表达式的值分别为多少？</span><br><span class="line">已知，结构体Test类型的变量大小是<span class="number">20</span>个字节</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p + <span class="number">0x1</span>);<span class="comment">//0x100014</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)p + <span class="number">0x1</span>);<span class="comment">//0x100001</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>*)p + <span class="number">0x1</span>);<span class="comment">//0x100004</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/55780ebe1e094bb0aa46d75add1757da.png#pic_center" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题三-1"><a href="#💨题三-1" class="headerlink" title="💨题三"></a>💨题三</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)((<span class="type">int</span>)a + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x,%x&quot;</span>, ptr1[<span class="number">-1</span>], *ptr2);<span class="comment">//4 2000000</span></span><br><span class="line"><span class="comment">//*(ptr+(-1)) --&gt; *(ptr-1)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/3fd5e7b5fe7446c69b1015138426eba3.png#pic_center" alt="在这里插入图片描述"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/6bb91eb581174f35ad7a53952645c0c9.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题四-1"><a href="#💨题四-1" class="headerlink" title="💨题四"></a>💨题四</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">2</span>] = &#123; (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>) &#125;;<span class="comment">//用了小括号括起来的，就是逗号表达式，只取最后</span></span><br><span class="line"><span class="comment">//1     3       5</span></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = a[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p[<span class="number">0</span>]);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组情况<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/88919e9a51ad4eaa9312abd01b6201a2.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题五-1"><a href="#💨题五-1" class="headerlink" title="💨题五"></a>💨题五</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="built_in">int</span>(*p)[<span class="number">4</span>];</span><br><span class="line">p = a;<span class="comment">//int(*)[5]</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p,%d\n&quot;</span>, &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>], &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>]);<span class="comment">//FFFFFFFC  -4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/7157968131cc465dbac6c1853de885f0.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题六-1"><a href="#💨题六-1" class="headerlink" title="💨题六"></a>💨题六</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;aa + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)(*(aa + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(ptr1 - <span class="number">1</span>), *(ptr2 - <span class="number">1</span>));<span class="comment">//10 5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/790847645d69493a930af9553386ed13.png" alt="在这里插入图片描述"><br>注意：<strong>二维数组的首地址就是第一行的地址</strong></p></blockquote><h3 id="💨题七"><a href="#💨题七" class="headerlink" title="💨题七"></a>💨题七</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* a[] = &#123; <span class="string">&quot;work&quot;</span>,<span class="string">&quot;at&quot;</span>,<span class="string">&quot;alibaba&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span>** pa = a;</span><br><span class="line">pa++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *pa);<span class="comment">//at</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/f2d2afaf5fa94172a0165e771999e5ad.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题八"><a href="#💨题八" class="headerlink" title="💨题八"></a>💨题八</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* c[] = &#123; <span class="string">&quot;ENTER&quot;</span>,<span class="string">&quot;NEW&quot;</span>,<span class="string">&quot;POINT&quot;</span>,<span class="string">&quot;FIRST&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span>** cp[] = &#123; c + <span class="number">3</span>,c + <span class="number">2</span>,c + <span class="number">1</span>,c &#125;;</span><br><span class="line"><span class="type">char</span>*** cpp = cp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, **++cpp);<span class="comment">//POINT</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *-- * ++cpp + <span class="number">3</span>);<span class="comment">//ER</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *cpp[<span class="number">-2</span>] + <span class="number">3</span>);<span class="comment">//ST</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, cpp[<span class="number">-1</span>][<span class="number">-1</span>] + <span class="number">1</span>);<span class="comment">//EW</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>——————————————-开始状态——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/b001f6a032334d098c97229e7afc7841.png" alt="在这里插入图片描述"><br>——————————————-**++cpp——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/a13906bd8e0d402f9e38371740b75a41.png" alt="在这里插入图片描述"><br>——————————————-＊- -＊++cpp+3——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/acb5ff2eeeb64b3da975323b4c3be8fd.png" alt="在这里插入图片描述"><br>——————————————-*cpp[-2] + 3——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/da7e3c9adc274aa6bf8e204ba219b066.png" alt="在这里插入图片描述"><br>——————————————-cpp[-1][-1] + 1——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/8b3895b7f9f34d5d85ae2dc6fecd6ad8.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p><font color="red">若是本文有出处，请各位小伙伴们留言哦~，看到会及时回复，另外制作不易，一键三连！！！</p></blockquote><p><strong>本文是作者直接从CSDN拿过来的</strong><br>原址版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>CSDN链接：<a href="https://blog.csdn.net/weixin_65508929/article/details/126293464">https://blog.csdn.net/weixin_65508929/article/details/126293464</a></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>itzzan博客简介</title>
      <link href="/post/9f09ee3e.html"/>
      <url>/post/9f09ee3e.html</url>
      
        <content type="html"><![CDATA[<p>Zan blog简介：建立个人博客是为了更好的分享，在上面我会发表一些学习的笔记、见解什么的，相当于一个生活日记一样。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
