<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度剖析数据在内存中的存储-C进阶</title>
      <link href="/post/e4a58e1d.html"/>
      <url>/post/e4a58e1d.html</url>
      
        <content type="html"><![CDATA[<h1 id="深度剖析数据在内存中的存储"><a href="#深度剖析数据在内存中的存储" class="headerlink" title="深度剖析数据在内存中的存储"></a>深度剖析数据在内存中的存储</h1><h2 id="类型的基本归类"><a href="#类型的基本归类" class="headerlink" title="类型的基本归类"></a>类型的基本归类</h2><ol><li><h3 id="整形家族"><a href="#整形家族" class="headerlink" title="整形家族"></a>整形家族</h3></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/78e84b2f6cd84e609f39f5a8d06f8398.png" alt="在这里插入图片描述"></p><h4 id="整型在内存中的存储"><a href="#整型在内存中的存储" class="headerlink" title="整型在内存中的存储"></a>整型在内存中的存储</h4><blockquote><p><strong>整型表示的范围在limits.h头文件中定义</strong></p><h5 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h5></blockquote><p>   <strong>一个整数的二进制表示有三种：原码、反码、补码</strong></p><blockquote><p><strong>正数中：原码、反码、补码相同</strong></p></blockquote><blockquote><p><strong>负数与整数不同</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/83f7a7af396e4fa9b032809eb0de2ee0.png" alt="在这里插入图片描述"></p></blockquote><p><strong>注意</strong></p><ol><li><strong>二进制中的第一位表示符号位，1表示负数，0表示正数</strong></li><li><strong>数据在内存中的存储都是补码，而我们人眼看到的数据都是二进制原码转换成十进制的数</strong></li><li><strong>如果碰到一个正数，则可以直接处理，因为正数的原反补码都相同，而负数要将其转换成补码在进行处理</strong></li></ol><h5 id="大小端介绍"><a href="#大小端介绍" class="headerlink" title="大小端介绍"></a>大小端介绍</h5><p><strong>大端字节序和小端字节序</strong></p><blockquote><p><strong>大端字节序：把数据的低位字节序的内容存放在高地址处，高位字节序的内容放在低地址处</strong></p></blockquote><blockquote><p><strong>小端字节序：把数据的低位字节序的内容存放在低地址处，高位字节序的内容放在低地址处</strong></p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/c5d03fd0d8904812a1827af26127a6c2.png" alt="在这里插入图片描述"></p><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/c62220d1abd6498eb9ffd9fd3c8191e2.png" alt="在这里插入图片描述"></p></blockquote><ul><li><strong>a为十六进制 11 22 33 44, 而定义十六进制前面的11为高位字节序,后面的44为低位字节序</strong></li></ul><hr><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p> - </p><ul><li><strong>char类型到底是signed char还是unsigned char, C语言标准并没有规定，取决于编译器</strong></li><li><strong>int类型是signed int, short类型是signed short, C语言规定</strong></li><li><font color="red">有符号的char类型(signed char)的取值范围: -128~127. 另外-128是计算不出来的,但是编译器看到10000000二进制序列会直接编译成-128</li><li><font color='red'>无符号的char类型(unsigned char)的取值范围:0~255</li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/6c6c25089c1b42c998f5055b9433c286.png" alt="在这里插入图片描述"></li></ul><hr><h3 id="浮点数家族"><a href="#浮点数家族" class="headerlink" title="浮点数家族"></a>浮点数家族</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/5db4c6bf0c0741a8957cdeca64ea6cc6.png" alt="在这里插入图片描述"></p><h4 id="浮点数在内存中的存储"><a href="#浮点数在内存中的存储" class="headerlink" title="浮点数在内存中的存储"></a>浮点数在内存中的存储</h4><blockquote><p><strong>浮点数表示的范围在float.h头文件中定义</strong></p></blockquote><h5 id="浮点数存储规则"><a href="#浮点数存储规则" class="headerlink" title="浮点数存储规则"></a>浮点数存储规则</h5><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/4fb8809374654ce09ae13e53f4839db6.png" alt="在这里插入图片描述"></p></blockquote><ol><li><strong>(-1)^S * M * 2^E</strong></li><li><strong>(-1)^s表示符号位，当s&#x3D;0，V为正数；当s&#x3D;1，V为负数</strong></li><li><strong>M表示有效数字，大于等于1，小于2</strong></li><li><strong>2^E表示指数位</strong></li></ol><hr><blockquote><p><strong>例如:十进制5.5</strong><br><strong>1.   先转换成二进制为101.1——-小数点后面是负数次，也就是1*2^-1次</strong><br><strong>2.  101.1 –&gt; 1.011*2^2（因为是2进制，而且移动2位，所以乘2乘2次方）</strong><br><strong>3. s&#x3D;0；M&#x3D;1.011；E&#x3D;2———-正数(所以s&#x3D;0),M为有效数字,E为指数</strong></p></blockquote><hr><h5 id="浮点数另外的存储规则-对有效数字M和指数E的规定"><a href="#浮点数另外的存储规则-对有效数字M和指数E的规定" class="headerlink" title="浮点数另外的存储规则(对有效数字M和指数E的规定)"></a>浮点数另外的存储规则(对有效数字M和指数E的规定)</h5><h6 id="有效数字M"><a href="#有效数字M" class="headerlink" title="有效数字M"></a>有效数字M</h6><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/cb09a3070d1342c89cee0e0c757bead1.png" alt="在这里插入图片描述"><br><font color='red'  size=5><strong>即:将有效数字M前面的1省略,最后在补上</strong></p></blockquote><h6 id="指数E"><a href="#指数E" class="headerlink" title="指数E"></a>指数E</h6><blockquote><ol><li><strong>E不全为0或不全为1（重点)</strong></li><li><strong>E全为0</strong></li><li><strong>E全为1</strong></li></ol></blockquote><hr><p><strong>E不全为0或不全为1</strong></p><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/46e586460b49480ba9d8b9c017230587.png" alt="在这里插入图片描述"><br><font color='red'  size=5>即:将E+127（float类型）或者+1023（double类型）,再转换成二进制<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/9292c03273a64f2b8ab050811bef90ba.png" alt="在这里插入图片描述"></p></blockquote><hr><p><strong>E全为0</strong></p><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/04f8d7d0bdf143088fd45fd8a603c768.png" alt="在这里插入图片描述"><br><font color='red'  size=5><strong>即:这个浮点数近似为0,可以不用计算,因为全0,-127后就是-127的二进制,即E为-126次,因此近似为0</strong></p></blockquote><hr><p><strong>E全为1</strong></p><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/f9e6382d12f94f6bb578b93e95f3a550.png" alt="在这里插入图片描述"><br><font color='red'  size=5><strong>即:这个浮点数为无穷大,因为E为很大的数,因此无穷大</strong></p></blockquote><hr><h5 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h5><blockquote><p><strong>float类型</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/0c1ef74484c4492b91f258248e6e8a71.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p><strong>double类型</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/e26a0bdfc16c4424b0270fd5e8804a5d.png" alt="在这里插入图片描述"></p></blockquote><h3 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h3><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/fb7a4045139f4b3aa95245c03d9ccd40.png" alt="在这里插入图片描述"></p></blockquote><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/5fee12d54b7f418cbbd9ab03f28be57c.png" alt="在这里插入图片描述"></p><h3 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h3><blockquote><p><strong>void 表示空类型（无类型）</strong><br><strong>通常应用于函数的返回类型、函数的参数、指针类型</strong></p><ol><li><strong>函数的返回类型 void test()</strong></li><li><strong>函数参数 void test(void)</strong></li><li><font color='black'>指针 void* p</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针就该这么学-C指针进阶</title>
      <link href="/post/ae18156d.html"/>
      <url>/post/ae18156d.html</url>
      
        <content type="html"><![CDATA[<p><strong>本文是作者直接从CSDN拿过来的</strong><br>原址版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>CSDN链接：<a href="https://blog.csdn.net/weixin_65508929/article/details/126293464">https://blog.csdn.net/weixin_65508929/article/details/126293464</a></p><p>本期介绍：<br><font color="red"><strong>本期主要讲解C语言指针如何轻松拿下，以各种面试真题来讲解C语言指针就该这么学</strong>👀</p><h1 id="🏡字符指针"><a href="#🏡字符指针" class="headerlink" title="🏡字符指针"></a>🏡字符指针</h1><h2 id="🗝️基本介绍"><a href="#🗝️基本介绍" class="headerlink" title="🗝️基本介绍"></a>🗝️基本介绍</h2><ul><li>字符指针用<strong>char</strong>*来定义</li></ul><p>一般使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> *pc = &amp;ch;</span><br><span class="line">    *pc = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将<strong>ch的地址</strong>传到<strong>pc</strong>中，*pc（解引用pc）就为’w’（字符w），将其改变为’s’（字符s）</li></ul><h2 id="🗝️面试题"><a href="#🗝️面试题" class="headerlink" title="🗝️面试题"></a>🗝️面试题</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str3 = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str4 = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(str1 ==str2)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are same\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are not same\n&quot;</span>);</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">if</span>(str3 ==str4)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are same\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are not same\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：<br><img src="https://img-blog.csdnimg.cn/a93d3a7f589944e0a0e5d021e15c521d.png#pic_center" alt="在这里插入图片描述"><br><strong>解释：</strong></p><blockquote><p>因为str1和str2都是数组，<strong>都开辟了一块空间来存储数组</strong>，并且表示的都是首元素的地址 </p></blockquote><blockquote><p>str3和str4两个都是<strong>字符指针</strong>，定义的是<strong>同一个字符串的首元素地址</strong>，所以相等。并且是常量字符串。而且<strong>常量字符串是不能改变的</strong>，且只有一份</p></blockquote><blockquote><p>指针指向<strong>同一个字符串</strong>的时候，实际会指向<strong>同一块内存</strong><br>而用<strong>相同的常量字符串</strong>去初始化<strong>不同的数组</strong>的时候就会开辟出<strong>不同的内存块</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/d7d6f604ee1e40bd854c59548a53ad74.png" alt="在这里插入图片描述"></p><h1 id="🏡数组指针"><a href="#🏡数组指针" class="headerlink" title="🏡数组指针"></a>🏡数组指针</h1><h2 id="🗝️基本介绍-1"><a href="#🗝️基本介绍-1" class="headerlink" title="🗝️基本介绍"></a>🗝️基本介绍</h2><ul><li>一种<strong>指向数组</strong>的<strong>指针</strong>（<strong>本质是指针</strong>）</li></ul><p> 辨别数组指针和指针数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span> (*p2)[<span class="number">10</span>];</span><br><span class="line">P1和p2又表示什么呢？</span><br></pre></td></tr></table></figure><blockquote><p>由于[]的优先级要高于*号的，因此p1先和[10]结合，返回类型为int**类型，所以p1是一个指针数组</p></blockquote><blockquote><p><strong>p2先和*结合</strong>，说明p2是一个<strong>指针变量</strong>，然后<strong>指向的是一个大小为10个整型的数组</strong>。所以p2是一个指针，指向一个数组，叫数组指针</p></blockquote><h2 id="🗝️-amp-数组名和数组名"><a href="#🗝️-amp-数组名和数组名" class="headerlink" title="🗝️&amp;数组名和数组名"></a>🗝️&amp;数组名和数组名</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/4d8e71e4657546249494c341556317d3.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p><font color="red"><strong>&amp;数组名和数组名都表示首元素的地址，但是两者的本质不同</strong></p></blockquote><blockquote><p><strong>&amp;arr表示整个数组的首地址，即首元素地址<br>arr表示数组首元素的地址</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;arr = %p\n&quot;</span>, arr);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr= %p\n&quot;</span>, &amp;arr);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;arr+1 = %p\n&quot;</span>, arr+<span class="number">1</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr+1= %p\n&quot;</span>, &amp;arr+<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/8d45a528bacd4b82b6bfd4fdc7802ec0.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p><font color="blue">因为arr表示数组首元素的地址，因此arr+1就表示数组第二个元素的地址</p></blockquote><blockquote><p><font color="blue">而&amp;arr表示的是整个数组的地址，也是首元素的地址，因此&amp;arr+1表示跳出整个数组的首元素地址</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2d1f2364477c454bb998f26a7c698950.png#pic_center" alt="在这里插入图片描述"></p><h2 id="🗝️数组指针的使用"><a href="#🗝️数组指针的使用" class="headerlink" title="🗝️数组指针的使用"></a>🗝️数组指针的使用</h2><ul><li>数组指针<strong>指向的是数组</strong>，那数组指针中存放的应该是<strong>数组的地址</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span> (*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//把数组arr的地址赋值给数组指针变量p</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是我们很少这样子使用，一般对数组指针的使用都在<strong>传参</strong>之中</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr1</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>], <span class="type">int</span> row, <span class="type">int</span> col)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">       &#125;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr2</span><span class="params">(<span class="type">int</span> (*arr)[<span class="number">5</span>], <span class="type">int</span> row, <span class="type">int</span> col)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">print_arr1</span>(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">print_arr2</span>(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组名arr，表示<strong>首元素的地址</strong>，但是<strong>二维数组的首元素是二维数组的第一行</strong>，所以这里传递的arr，其实相当于<strong>第一行的地址</strong>，是<strong>一维数组的地址</strong>，可以数组指针来接收。</p></blockquote><h2 id="🗝️题目"><a href="#🗝️题目" class="headerlink" title="🗝️题目"></a>🗝️题目</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以下代码的含义是什么？</span><br><span class="line"><span class="number">1.</span> <span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="number">2.</span> <span class="type">int</span> *parr1[<span class="number">10</span>];</span><br><span class="line"><span class="number">3.</span> <span class="built_in">int</span> (*parr2)[<span class="number">10</span>];</span><br><span class="line"><span class="number">4.</span> <span class="built_in">int</span> (*parr3[<span class="number">10</span>])[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><blockquote><p><font color="brown">1. 整型数组<br>2. 整型指针的数组<br>3. 数组指针，该指针能够指向一个数组，数组10个元素，每个元素的类型是int类型<br>4. parr3是一个存储数组指针的数组，该数组能 够存放10个数值指针，每个数组指针能够指向一个数组，数组5个元素，每个元素是int类型</p></blockquote><h1 id="🏡数组参数、指针参数"><a href="#🏡数组参数、指针参数" class="headerlink" title="🏡数组参数、指针参数"></a>🏡数组参数、指针参数</h1><h2 id="🗝️一维数组传参"><a href="#🗝️一维数组传参" class="headerlink" title="🗝️一维数组传参"></a>🗝️一维数组传参</h2><h3 id="💨题目"><a href="#💨题目" class="headerlink" title="💨题目"></a>💨题目</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">1.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[])</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">2.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>])</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">3.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> *arr)</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">4.</span> <span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">(<span class="type">int</span> *arr[<span class="number">20</span>])</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">5.</span> <span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">(<span class="type">int</span> **arr)</span><span class="comment">//ok?</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="type">int</span> *arr2[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="built_in">test</span>(arr);</span><br><span class="line"> <span class="built_in">test2</span>(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的5个全部ok，全都是正确的（易）</p><ol><li>arr是一个有10个元素的数组，10个元素都是int类型的，当传参传入(1)的时候，传过去的是首元素的地址，而int arr[]就是接受了这个数组的地址，这[]里面的数字可以不写</li><li>跟(1)差不多，只不过加了[]里面的数字，就是限制了元素个数</li><li>*arr说明是一个指针，而指针就是地址，所以是对的</li><li>arr2是一个由20个元素的数组，20个元素都是int＊类型，当传参传入(4)的时候，传过去的也是首元素的地址，而arr[20]就接受了这个地址，且类型是int＊类型</li><li>＊arr说明是一个指针，指针就是地址，且类型是int＊类型</li></ol></blockquote><h2 id="🗝️二维数组传参"><a href="#🗝️二维数组传参" class="headerlink" title="🗝️二维数组传参"></a>🗝️二维数组传参</h2><h3 id="💨题目-1"><a href="#💨题目-1" class="headerlink" title="💨题目"></a>💨题目</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">2.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[][])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">3.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> arr[][<span class="number">5</span>])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">4.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> *arr)</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">5.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span>* arr[<span class="number">5</span>])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">6.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> (*arr)[<span class="number">5</span>])</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="number">7.</span> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> **arr)</span><span class="comment">//ok？</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="built_in">test</span>(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正确ok（1 3 6），错误no（2 4 5 7）</p><ol><li>简单（不讲解）</li><li>二维数组传参，参数可以写成数组，但列不能省略</li><li>行可以不知道，但列要知道</li><li>arr传过去的是第一行的地址，而且是有5个元素的一维数组，而*arr只表示的是第一行的地址。二维数组传参，传过来的是数组首地址 —— 一维数组，不能匹配</li><li>arr[5]接收到的是第一行的地址，放不了，这里是存放指针的数组不能匹配</li><li>*arr表示第一行的地址，加了[5]就是有5个元素的一维数组，即传过来的地址</li><li>**arr其实表示的是首元素的地址，即第一行的首元素的地址，二级指针不能匹配一维数组的地址</li></ol></blockquote><blockquote><p>总结：二维数组传参，函数形参的设计只能省略第一个[]的数字，因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素，这样才方便运算。</p></blockquote><h2 id="🗝️一维指针传参"><a href="#🗝️一维指针传参" class="headerlink" title="🗝️一维指针传参"></a>🗝️一维指针传参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> sz)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sz; i++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(p+i));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = arr;</span><br><span class="line"> <span class="type">int</span> sz = <span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"> <span class="comment">//一级指针p，传给函数</span></span><br><span class="line"> <span class="built_in">print</span>(p, sz);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🗝️二维指针传参"><a href="#🗝️二维指针传参" class="headerlink" title="🗝️二维指针传参"></a>🗝️二维指针传参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span>** ptr)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, **ptr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"> <span class="type">int</span>*p = &amp;n;</span><br><span class="line"> <span class="type">int</span> **pp = &amp;p;</span><br><span class="line"> <span class="built_in">test</span>(pp);</span><br><span class="line"> <span class="built_in">test</span>(&amp;p);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="🏡函数指针"><a href="#🏡函数指针" class="headerlink" title="🏡函数指针"></a>🏡函数指针</h1><h2 id="🗝️基本介绍-2"><a href="#🗝️基本介绍-2" class="headerlink" title="🗝️基本介绍"></a>🗝️基本介绍</h2><ul><li><strong>指向函数的指针，存放函数地址的指针</strong></li></ul><p>首先来看一串代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, test);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;test);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p><img src="https://img-blog.csdnimg.cn/24134cc071a14a0990efd6c10b04a5ed.png#pic_center" alt="在这里插入图片描述"></p></blockquote><ul><li><font color="red">这里我们发现函数名和&amp;函数名取出来的地址相同<blockquote><p>那我们可以得出结论：**&amp;函数名 &#x3D;&#x3D;  函数名<strong>，同时我们要知道</strong>数组名  !&#x3D;  &amp;数组名**<br>因此在<strong>调用函数名的地址</strong>，可以<strong>省略&amp;符号</strong></p></blockquote></li></ul><h2 id="🗝️有趣的代码（来自《C陷阱和缺陷》）"><a href="#🗝️有趣的代码（来自《C陷阱和缺陷》）" class="headerlink" title="🗝️有趣的代码（来自《C陷阱和缺陷》）"></a>🗝️有趣的代码（来自《C陷阱和缺陷》）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*(<span class="built_in">void</span> (*)())<span class="number">0</span>)();</span><br></pre></td></tr></table></figure><blockquote><p>首先观察代码，我们可以发现里面能突破的只有<strong>常数0</strong>，如果它代表常数0，那<strong>前面的(类型)就是强转类型</strong>，发现强转为<strong>函数指针类型</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span>(*)()</span><br><span class="line"><span class="built_in">void</span>(*)()<span class="number">0</span></span><br><span class="line">将强转类型拿下后：</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/85a83ce556044b8c95e2eacf6269a4de.png#pic_center" alt="在这里插入图片描述"></p><ul><li>发现就是<strong>调用函数</strong><blockquote><p><strong>调用0地址处的函数，该函数无参，返回类型是void</strong><br><font color="blue">**1. void(＊)() - 函数指针类型 </p><ol start="2"><li>(void(＊)())0 - 对0进行强制类型转换 - 被解释为一个函数的地址 </li><li>＊(void(＊)())0 - 对0地址进行解引用操作</li><li>(＊(void(＊)())0)() - 调用0地址处的函数**</li></ol></blockquote></li></ul><p>代码二：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (*<span class="built_in">signal</span>(<span class="type">int</span> , <span class="built_in">void</span>(*)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br></pre></td></tr></table></figure><blockquote><ol><li>signal 和()先结合，说明signal是函数名 </li><li>signal函数的第一个参数的类型是int类型，第二个参数的类型是函数指针类型该函数指针，指向一个参数为int，返回类型是void的函数 </li><li>signal函数的返回类型也是一个函数指针，该函数指针指向一个参数为int，返回类型为void的函数 signal是一个函数的声明<br><img src="https://img-blog.csdnimg.cn/03c56dff9ff04be0930e440d80c68a78.png#pic_center" alt="在这里插入图片描述"></li></ol></blockquote><h1 id="🏡函数指针数组"><a href="#🏡函数指针数组" class="headerlink" title="🏡函数指针数组"></a>🏡函数指针数组</h1><h2 id="🗝️基本认识和使用"><a href="#🗝️基本认识和使用" class="headerlink" title="🗝️基本认识和使用"></a>🗝️基本认识和使用</h2><ul><li><strong>存放函数指针的数组，并且只能存放同类型的函数指针</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">int</span>(*pf1)(<span class="type">int</span>, <span class="type">int</span>) = Add;</span><br><span class="line"><span class="built_in">int</span>(*pf2)(<span class="type">int</span>, <span class="type">int</span>) = Sub;</span><br><span class="line"><span class="built_in">int</span>(*pfArr[<span class="number">2</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123;Add, Sub&#125;;</span><br><span class="line"><span class="comment">//pfArr - 函数指针数组 - 存放同类型的函数指针</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="🏡指向函数指针数组的指针"><a href="#🏡指向函数指针数组的指针" class="headerlink" title="🏡指向函数指针数组的指针"></a>🏡指向函数指针数组的指针</h1><h2 id="🗝️基本介绍和使用"><a href="#🗝️基本介绍和使用" class="headerlink" title="🗝️基本介绍和使用"></a>🗝️基本介绍和使用</h2><ul><li><strong>是一个指针，指针指向一个数组，数组的元素都是函数指针</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//函数指针pfun</span></span><br><span class="line"> <span class="built_in">void</span> (*pfun)(<span class="type">const</span> <span class="type">char</span>*) = test;</span><br><span class="line"> <span class="comment">//函数指针的数组pfunArr</span></span><br><span class="line"> <span class="built_in">void</span> (*pfunArr[<span class="number">5</span>])(<span class="type">const</span> <span class="type">char</span>* str);</span><br><span class="line"> pfunArr[<span class="number">0</span>] = test;</span><br><span class="line"> <span class="comment">//指向函数指针数组pfunArr的指针ppfunArr</span></span><br><span class="line"> <span class="built_in">void</span> (*(*ppfunArr)[<span class="number">5</span>])(<span class="type">const</span> <span class="type">char</span>*) = &amp;pfunArr;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(*p)(<span class="type">int</span>, <span class="type">int</span>);<span class="comment">//函数指针</span></span><br><span class="line"><span class="built_in">int</span>(*p2[<span class="number">4</span>])(<span class="type">int</span>, <span class="type">int</span>);<span class="comment">//函数指针的数组</span></span><br><span class="line"><span class="built_in">int</span>(*(*p3)[<span class="number">4</span>])(<span class="type">int</span>, <span class="type">int</span>) = &amp;p2;<span class="comment">//取出的是函数指针数组的地址</span></span><br><span class="line"><span class="comment">//p3就是一个指向函数指针数组的指针</span></span><br></pre></td></tr></table></figure><h1 id="🏡回调函数"><a href="#🏡回调函数" class="headerlink" title="🏡回调函数"></a>🏡回调函数</h1><h2 id="🗝️基本介绍-3"><a href="#🗝️基本介绍-3" class="headerlink" title="🗝️基本介绍"></a>🗝️基本介绍</h2><ul><li>回调函数就是一个<strong>通过函数指针调用的函数</strong>，将<strong>函数的指针</strong>(地址)作为<strong>参数传递</strong>给<strong>另一个函数</strong>，当整个指针被用来调用其所指向的函数时，这就是回调函数</li></ul><blockquote><p>可以这么理解：有一个A函数，这里不是直接去调用A函数，而是先将A函数的地址传给B函数(这里的B函数的参数就是一个函数指针)，然后通过B函数去调用A函数时，这样子就被称为回调函数<br><img src="https://img-blog.csdnimg.cn/0091f7dbff0d42de973ccb2cdecb9219.png#pic_center" alt="在这里插入图片描述"></p></blockquote><h2 id="🗝️qsort函数"><a href="#🗝️qsort函数" class="headerlink" title="🗝️qsort函数"></a>🗝️qsort函数</h2><ul><li><strong>qsort函数就是快速排序，什么类型都能排（整型数据、字符串 数据、结构体数据）</strong></li></ul><p><strong>对于这种不熟悉的函数，不知道如何使用的话可以上<a href="https://cplusplus.com/reference/">查找</a>即<a href="https://cplusplus.com/reference/">https://cplusplus.com/reference/</a><br>在上面可以查看到qsort的使用方法</strong><br><img src="https://img-blog.csdnimg.cn/4495dd18e5974b9ba61844bc44599132.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">(<span class="type">void</span>* base, <span class="comment">//base里面放的是待排序的第一个元素(对象)的地址.void* 无类型的指针，什么都可以放进去</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">size_t</span> num, <span class="comment">//排序数据元素的个数</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">size_t</span> size,<span class="comment">//数据中一个元素的大小，单位是字节</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span></span>;<span class="comment">//是用来比较待排序数据中的2个元素的函数</span></span><br></pre></td></tr></table></figure><h3 id="💨qsort实现整型数据的排序"><a href="#💨qsort实现整型数据的排序" class="headerlink" title="💨qsort实现整型数据的排序"></a>💨qsort实现整型数据的排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//整型数据的排序</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="built_in">qsort</span>(arr, sz, <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line"><span class="built_in">print_arr</span>(arr, sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test1</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="💨qsort实现对结构体数据的排序"><a href="#💨qsort实现对结构体数据的排序" class="headerlink" title="💨qsort实现对结构体数据的排序"></a>💨qsort实现对结构体数据的排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Stu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort_by_age</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">struct</span> Stu*)e1)-&gt;age - ((<span class="keyword">struct</span> Stu*)e2)-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort_by_name</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(((<span class="keyword">struct</span> Stu*)e1)-&gt;name, ((<span class="keyword">struct</span> Stu*)e2)-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//使用qsort函数排序结构体数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stu</span> s[] = &#123; &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>&#125;, &#123;<span class="string">&quot;lisi&quot;</span>, <span class="number">34</span>&#125;, &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="comment">//按照年龄来排序</span></span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(s) / <span class="built_in">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//qsort(s, sz, sizeof(s[0]), sort_by_age);</span></span><br><span class="line"><span class="comment">//按照名字比较</span></span><br><span class="line"><span class="built_in">qsort</span>(s, sz, <span class="built_in">sizeof</span>(s[<span class="number">0</span>]), sort_by_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test2</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="💨模拟实现qsort函数，实现一个冒泡排序的通用算法"><a href="#💨模拟实现qsort函数，实现一个冒泡排序的通用算法" class="headerlink" title="💨模拟实现qsort函数，实现一个冒泡排序的通用算法"></a>💨模拟实现qsort函数，实现一个冒泡排序的通用算法</h3><ul><li>首先先来了解下冒泡排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设写一个冒泡排序函数，让你排序字符串</span></span><br><span class="line"><span class="comment">//bubble_sort_str();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">升序</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">冒泡排序的趟数</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一趟冒泡排序</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - i <span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">交换</span><br><span class="line"><span class="type">int</span> tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">print_arr</span>(arr, sz);</span><br><span class="line"><span class="built_in">bubble_sort</span>(arr, sz);</span><br><span class="line"><span class="built_in">print_arr</span>(arr, sz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>冒泡排序就是两两比较，我这里是升序，所以小的在前，每次都相邻比较，每次都将最小的放在最后</strong><img src="https://img-blog.csdnimg.cn/51a92a9b46bc47b19ab4cbd98d827f6b.png" alt="在这里插入图片描述"></p></blockquote><ul><li><strong>✨模拟实现qsort函数</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模仿qsort函数，实现一个冒泡排序的通用算法（可以排各种数据）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">char</span>* buf1, <span class="type">char</span>* buf2, <span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; width; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> tmp = *buf1;</span><br><span class="line">*buf1 = *buf2;</span><br><span class="line">*buf2 = tmp;</span><br><span class="line">buf1++;</span><br><span class="line">buf2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">void</span>* base, <span class="type">int</span> sz, <span class="type">int</span> width, <span class="type">int</span>(*cmp)(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//趟数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一趟的排序</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//两个元素的比较</span></span><br><span class="line"><span class="comment">//char*是加几就跳过几个字节</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cmp</span>((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="built_in">Swap</span>((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width, width);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort_by_age</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">struct</span> Stu*)e1)-&gt;age - ((<span class="keyword">struct</span> Stu*)e2)-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">bubble_sort</span>(arr, sz, <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line"><span class="built_in">print_arr</span>(arr, sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stu</span> s[<span class="number">3</span>] = &#123; &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>&#125;, &#123;<span class="string">&quot;lisi&quot;</span>, <span class="number">34</span>&#125;, &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="built_in">sizeof</span>(s) / <span class="built_in">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">bubble_sort</span>(s, sz, <span class="built_in">sizeof</span>(s[<span class="number">0</span>]), sort_by_age);</span><br><span class="line"><span class="comment">//bubble_sort(s, sz, sizeof(s[0]), sort_by_name);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test3</span>();</span><br><span class="line"><span class="built_in">test4</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="✨指针和数组笔试题解析（重点）"><a href="#✨指针和数组笔试题解析（重点）" class="headerlink" title="✨指针和数组笔试题解析（重点）"></a>✨指针和数组笔试题解析（重点）</h1><blockquote><p><font color="red"><strong>数组名的意义：</strong> </p><ol><li><strong>sizeof(数组名)<strong>，这里要数组名</strong>单独存放</strong>在sizeof内部，这里的数组名才表示<strong>整个数组</strong>，不然表示的是首元素的地址，这里计算的是整个数组的大小</li><li><strong>&amp;数组名</strong>，这里的数组名表示<strong>整个数组</strong>，取出的是整个数组的地址 </li><li><strong>除此之外</strong>所有的数组名都表示首元素的地址</li><li>sizeof里面计算的，<strong>只要是地址</strong>，那么<strong>计算出来就是4或8</strong>，和<strong>电脑的位数</strong>有关</li></ol></blockquote><h2 id="🗝️数组笔试题"><a href="#🗝️数组笔试题" class="headerlink" title="🗝️数组笔试题"></a>🗝️数组笔试题</h2><h3 id="💨题一"><a href="#💨题一" class="headerlink" title="💨题一"></a>💨题一</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一维数组</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a));<span class="comment">//16=4*4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a + <span class="number">0</span>));<span class="comment">//4或8，a+0是第一个地址，因为a+0了，a并不是单独放在sizeof内部，那么a就表示首元素的地址，+0那么还是首元素的地址，那就是4或8，看电脑位数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*a));<span class="comment">//4， a也是表示首元素的地址，解引用后就是1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a + <span class="number">1</span>));<span class="comment">//4或8，a+1就是第二个元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">1</span>]));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;a));<span class="comment">//4或8，&amp;a虽然是整个数组的地址，但是也是地址，因此sizeof计算的就是一个地址的大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*&amp;a));<span class="comment">//16，&amp;a是整个数组的地址，解引用后找到的就是整个数组，那么就是16</span></span><br><span class="line">&amp;a -- <span class="built_in">int</span>(*p)[<span class="number">4</span>] -- &amp;<span class="function">a</span></span><br><span class="line"><span class="function"><span class="title">printf</span><span class="params">(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a + <span class="number">1</span>))</span></span>;<span class="comment">//4或8，&amp;a表示整个数组的地址，+1跳过一个数组，下一块空间的地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;a[<span class="number">0</span>]));<span class="comment">//4或8，第一个元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;a[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，第二个元素的地址</span></span><br></pre></td></tr></table></figure><h3 id="💨题二"><a href="#💨题二" class="headerlink" title="💨题二"></a>💨题二</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字符数组</span><br><span class="line"><span class="type">char</span> arr[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr));<span class="comment">//随机值，arr首元素地址，往后数，但没有\0，因此随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr + <span class="number">0</span>));<span class="comment">//随机值，arr首元素地址，+0还是首元素地址，因此随机</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*arr));<span class="comment">//错误error，首元素的地址，解引用就是字符a，传过去就是97，不是个合法的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr[<span class="number">1</span>]));<span class="comment">//错误error，b为98，同上</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr));<span class="comment">//随机值，整个数组的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr + <span class="number">1</span>));<span class="comment">//随机值，跳过一个数组的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//随机值，b的地址</span></span><br></pre></td></tr></table></figure><blockquote><p>error的情况：在模拟strlen函数的时候，我们可以知道 int my_strlen(const char* str)它的参数是一个指针，应该接收地址，而这里传的是一个字符，因此error。<br>调试可以发现错误<br><img src="https://img-blog.csdnimg.cn/834ba30e82a84dd6b04858d23b1333fe.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题三"><a href="#💨题三" class="headerlink" title="💨题三"></a>💨题三</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> arr[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr));<span class="comment">//6，</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr + <span class="number">0</span>));<span class="comment">//4或8，arr表示首元素地址，+0还是首元素地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*arr));<span class="comment">//1，因arr是首元素的地址，*arr解引用就是a，</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr[<span class="number">1</span>]));<span class="comment">//1，arr[1]就是b</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr));<span class="comment">//4或8，取出这个地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr + <span class="number">1</span>));<span class="comment">//4或8，&amp;arr是整个数组的地址，+1跳到了f后面的地址，但还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，&amp;arr[0]就是a的地址，+1就是b的地址，还是地址</span></span><br></pre></td></tr></table></figure><h3 id="💨题四"><a href="#💨题四" class="headerlink" title="💨题四"></a>💨题四</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">[a,b,c,d,e,f,\<span class="number">0</span>]</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr));<span class="comment">//6，首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr + <span class="number">0</span>));<span class="comment">//6，首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*arr));<span class="comment">//error，将a传过去了，97作为地址有问题</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr[<span class="number">1</span>]));<span class="comment">//error，同上，只不过传的是98的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr));<span class="comment">//6，起始元素的地址，还是从首元素开始</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr + <span class="number">1</span>));<span class="comment">//随机值，跳出整个数组的地址，\0也跳过去了，所以就是随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//5，b的地址，从b开始数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr));<span class="comment">//7，总大小，算\0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr + <span class="number">0</span>));<span class="comment">//4或8，首元素地址+0还是首元素地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*arr));<span class="comment">//1，解引用就是字符a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(arr[<span class="number">1</span>]));<span class="comment">//1，解引用就是字符b</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr));<span class="comment">//4或8，整个数组的地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr + <span class="number">1</span>));<span class="comment">//4或8，跳过整个数组的地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，b的地址，还是地址</span></span><br></pre></td></tr></table></figure><h3 id="💨题五"><a href="#💨题五" class="headerlink" title="💨题五"></a>💨题五</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">a b c d e f \<span class="number">0</span>，p存的是a的地址</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p));<span class="comment">//6</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p + <span class="number">1</span>));<span class="comment">//5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*p));<span class="comment">//error，*p找到的是a，传进去是97，会出错</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p[<span class="number">0</span>]));<span class="comment">//error，同上理</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p));<span class="comment">//随机值，找的是p的首地址，p里面存的只是a的地址，因此没有\0，所以随机</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p + <span class="number">1</span>));<span class="comment">//随机值，同上理</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(p));<span class="comment">//4或8，p是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(p + <span class="number">1</span>));<span class="comment">//4或8，p+1就是b的地址，还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*p));<span class="comment">//1，拿出来a，大小就是1个字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(p[<span class="number">0</span>]));<span class="comment">//1，将字符串当作数组来访问，p[0] = *(p+0)，所以还是找到a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;p));<span class="comment">//4或8，取得还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;p + <span class="number">1</span>));<span class="comment">//4或8，取的是跳出整个p的地址，但还是地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;p[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，取出的是第二个元素b的地址</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>&amp;p就是取指针变量p的地址</strong><br>&amp;p就是取指针变量p的<strong>首地址</strong>，而p里面存的<strong>只有a的地址</strong>，没有\0，所以<strong>随机值</strong></p></blockquote><h3 id="💨题六"><a href="#💨题六" class="headerlink" title="💨题六"></a>💨题六</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">二维数组</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a));<span class="comment">//3*4*4 = 48....3*4*sizeof(int)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//4，第一行第一个元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>]));<span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，解释：a[0]作为数组名，并没有单独放在sizeof内部，</span></span><br><span class="line"> <span class="comment">//也没有取地址&amp;，而是与1结合，</span></span><br><span class="line"> <span class="comment">//所以a[0]就代表第一行第一个的地址，+1就是第二个元素的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*(a[<span class="number">0</span>] + <span class="number">1</span>)));<span class="comment">//4，解释：对(a[0]+1)第一行第二个元素的地址解引用就是第二个元素，是int类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a + <span class="number">1</span>));<span class="comment">//4或8，解释：a并没有单独放在sizeof内部，因此就作为二维数组首元素的地址，</span></span><br><span class="line">  <span class="comment">//二维数组首元素就是第一行,+1就是第二行的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*(a + <span class="number">1</span>)));<span class="comment">//16，解释：a+1是第二行的地址，所以解引用是第二行，*(a+1)&lt;--&gt;a[1]</span></span><br><span class="line">     <span class="comment">//所以计算的就是第二行的大小</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(&amp;a[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//4或8，解释：a[0]是第一行的数组名，取地址&amp;a[0]，取出的就是第一行的地址</span></span><br><span class="line">  <span class="comment">//+1就是第二行的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*(&amp;a[<span class="number">0</span>] + <span class="number">1</span>)));<span class="comment">//16，解引用拿到的就是第二行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(*a));<span class="comment">//16，a没有单独放在sizeof中，所以a表示首元素的地址，即第一行的地址，解引用就是第一行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(a[<span class="number">3</span>]));<span class="comment">//16，a[3]在数组里不存在，a[3]其实是第四行数组名（如果有的话）</span></span><br><span class="line"> <span class="comment">//所以其实不存在，也能通过类型计算大小的</span></span><br></pre></td></tr></table></figure><blockquote><p><font color="red">注意：<br><strong>1. sizeof内部的表达式时不计算的！</strong><br><strong>2. sizeof不会导致越界</strong><br><img src="https://img-blog.csdnimg.cn/16d662ae7efc40a18e97d84fa24ccebe.png#pic_center" alt="在这里插入图片描述"></p></blockquote><hr><blockquote><p>补充：sizeof的用法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">short</span> s = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(s = a + <span class="number">6</span>));<span class="comment">//2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);<span class="comment">//5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于sizeof<strong>内部不进行计算</strong>，因此只<strong>看最后输出为什么类型</strong>即可，最后输出为short类型，即2字节大小<br>因为sizeof<strong>内部不进行计算</strong>，所以<strong>s没有变化</strong>，所以s还是为5，打印即为5</p></blockquote><h2 id="🗝️指针笔试题"><a href="#🗝️指针笔试题" class="headerlink" title="🗝️指针笔试题"></a>🗝️指针笔试题</h2><h3 id="💨题一-1"><a href="#💨题一-1" class="headerlink" title="💨题一"></a>💨题一</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(a + <span class="number">1</span>), *(ptr - <span class="number">1</span>));<span class="comment">//2 5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/848bf3c2f8e14c5d8992567de465f118.png#pic_center" alt="在这里插入图片描述"><br><strong>&amp;a表示整个数组的首地址，因此+1就是跳过整个数组<br>而a只表示数组的首元素地址，+1就是表示第二个元素的地址</strong></p></blockquote><h3 id="💨题二-1"><a href="#💨题二-1" class="headerlink" title="💨题二"></a>💨题二</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">由于还没学习结构体，这里告知结构体的大小是<span class="number">20</span>个字节</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Num;</span><br><span class="line"><span class="type">char</span>* pcName;</span><br><span class="line"><span class="type">short</span> sDate;</span><br><span class="line"><span class="type">char</span> cha[<span class="number">2</span>];</span><br><span class="line"><span class="type">short</span> sBa[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line">*p假设p 的值为<span class="number">0x100000</span>。 如下表表达式的值分别为多少？</span><br><span class="line">已知，结构体Test类型的变量大小是<span class="number">20</span>个字节</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p + <span class="number">0x1</span>);<span class="comment">//0x100014</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)p + <span class="number">0x1</span>);<span class="comment">//0x100001</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>*)p + <span class="number">0x1</span>);<span class="comment">//0x100004</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/55780ebe1e094bb0aa46d75add1757da.png#pic_center" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题三-1"><a href="#💨题三-1" class="headerlink" title="💨题三"></a>💨题三</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)((<span class="type">int</span>)a + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x,%x&quot;</span>, ptr1[<span class="number">-1</span>], *ptr2);<span class="comment">//4 2000000</span></span><br><span class="line"><span class="comment">//*(ptr+(-1)) --&gt; *(ptr-1)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/3fd5e7b5fe7446c69b1015138426eba3.png#pic_center" alt="在这里插入图片描述"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/6bb91eb581174f35ad7a53952645c0c9.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题四-1"><a href="#💨题四-1" class="headerlink" title="💨题四"></a>💨题四</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">2</span>] = &#123; (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>) &#125;;<span class="comment">//用了小括号括起来的，就是逗号表达式，只取最后</span></span><br><span class="line"><span class="comment">//1     3       5</span></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = a[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p[<span class="number">0</span>]);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组情况<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/88919e9a51ad4eaa9312abd01b6201a2.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题五-1"><a href="#💨题五-1" class="headerlink" title="💨题五"></a>💨题五</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="built_in">int</span>(*p)[<span class="number">4</span>];</span><br><span class="line">p = a;<span class="comment">//int(*)[5]</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p,%d\n&quot;</span>, &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>], &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>]);<span class="comment">//FFFFFFFC  -4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/7157968131cc465dbac6c1853de885f0.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题六-1"><a href="#💨题六-1" class="headerlink" title="💨题六"></a>💨题六</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;aa + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)(*(aa + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(ptr1 - <span class="number">1</span>), *(ptr2 - <span class="number">1</span>));<span class="comment">//10 5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/790847645d69493a930af9553386ed13.png" alt="在这里插入图片描述"><br>注意：<strong>二维数组的首地址就是第一行的地址</strong></p></blockquote><h3 id="💨题七"><a href="#💨题七" class="headerlink" title="💨题七"></a>💨题七</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* a[] = &#123; <span class="string">&quot;work&quot;</span>,<span class="string">&quot;at&quot;</span>,<span class="string">&quot;alibaba&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span>** pa = a;</span><br><span class="line">pa++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *pa);<span class="comment">//at</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/f2d2afaf5fa94172a0165e771999e5ad.png" alt="在这里插入图片描述"></p></blockquote><h3 id="💨题八"><a href="#💨题八" class="headerlink" title="💨题八"></a>💨题八</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* c[] = &#123; <span class="string">&quot;ENTER&quot;</span>,<span class="string">&quot;NEW&quot;</span>,<span class="string">&quot;POINT&quot;</span>,<span class="string">&quot;FIRST&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span>** cp[] = &#123; c + <span class="number">3</span>,c + <span class="number">2</span>,c + <span class="number">1</span>,c &#125;;</span><br><span class="line"><span class="type">char</span>*** cpp = cp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, **++cpp);<span class="comment">//POINT</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *-- * ++cpp + <span class="number">3</span>);<span class="comment">//ER</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *cpp[<span class="number">-2</span>] + <span class="number">3</span>);<span class="comment">//ST</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, cpp[<span class="number">-1</span>][<span class="number">-1</span>] + <span class="number">1</span>);<span class="comment">//EW</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>——————————————-开始状态——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/b001f6a032334d098c97229e7afc7841.png" alt="在这里插入图片描述"><br>——————————————-**++cpp——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/a13906bd8e0d402f9e38371740b75a41.png" alt="在这里插入图片描述"><br>——————————————-＊- -＊++cpp+3——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/acb5ff2eeeb64b3da975323b4c3be8fd.png" alt="在这里插入图片描述"><br>——————————————-*cpp[-2] + 3——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/da7e3c9adc274aa6bf8e204ba219b066.png" alt="在这里插入图片描述"><br>——————————————-cpp[-1][-1] + 1——————————————-<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/10887/8b3895b7f9f34d5d85ae2dc6fecd6ad8.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p><font color="red">若是本文有出处，请各位小伙伴们留言哦~，看到会及时回复，另外制作不易，一键三连！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>itzzan博客简介</title>
      <link href="/post/9f09ee3e.html"/>
      <url>/post/9f09ee3e.html</url>
      
        <content type="html"><![CDATA[<p>Zan blog简介：建立个人博客是为了更好的分享，在上面我会发表一些学习的笔记、见解什么的，相当于一个生活日记一样。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
